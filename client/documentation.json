{
    "pipes": [],
    "interfaces": [
        {
            "name": "ActionModel",
            "id": "interface-ActionModel-f72d6d7bb2959741290740655473b26c726dd274e490183b09802ab9f2a6da967ed3808f6f4e397a1f9bca64f6932cbfb796364e10e042525f7af57546727b02",
            "file": "src/app/_models/action/actionModel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ActionModel {\r\n    id: number\r\n    message: string | null\r\n    actionTime: string | null\r\n}",
            "properties": [
                {
                    "name": "actionTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ActionsSieveResponse",
            "id": "interface-ActionsSieveResponse-12ae4e2f6897b5934b79b5a5cbab78f2ac541af77a90f2f4ead327a4fef54aeec156e587a676dcef90b67cf661ac050d3a579516d3b77f5b126fa3dbe46b08c7",
            "file": "src/app/_models/action/actionsSieveResponse.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionModel } from \"./actionModel\";\r\n\r\nexport interface ActionsSieveResponse {\r\n    items: ActionModel[]\r\n    currentPage: number,\r\n    totalPages: number,\r\n    pageSize: number,\r\n    totalCount: number,\r\n    hasPrevious: boolean,\r\n    hasNext: boolean\r\n}",
            "properties": [
                {
                    "name": "currentPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "hasNext",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "hasPrevious",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionModel[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "totalCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AppStateModel",
            "id": "interface-AppStateModel-79cbfe01ba60ff0fd4e60949dbd0752d0ad55740da47005f7acb0aa82b4eecd1cf83e72e609e9c8a99f3c2daa20d4e88d25b3bdb70b4af3dcf697c3ab2d22754",
            "file": "src/app/store/global/AppState.Model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ListCardsModel } from \"src/app/_models/listCards/listCardsModel\";\r\n\r\nexport interface AppStateModel{\r\n    boardId: number,\r\n    lists: ListCardsModel[]\r\n}",
            "properties": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListCardsModel[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BoardModel",
            "id": "interface-BoardModel-0e1b53e9045916bd4fff66741e030652e37d52273f9f8afc6fcbd2c3217ead7b8a3f5b34b31b386950b6c00d1b794247f3cf2ccb30625e76d25fc2c11318dff2",
            "file": "src/app/_models/board/boardModel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CardModel } from \"../card/cardModel\"\r\nimport { ListCardsModel } from \"../listCards/listCardsModel\"\r\n\r\nexport interface BoardModel {\r\n    id: number\r\n    name: string\r\n    listsCards: ListCardsModel[] | null\r\n    cards: CardModel[] | null\r\n  }",
            "properties": [
                {
                    "name": "cards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardModel[] | null",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "listsCards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListCardsModel[] | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CardModel",
            "id": "interface-CardModel-a34d97befab63eae4b16e4ac8eab5e1a3f51e4d33a4a018b2ac5ea103ca6c7ea97ee2f0914be2fd1dcde6adca6788c2b0b24a4472fcbe5aa329f0a1bbd5bc6be",
            "file": "src/app/_models/card/cardModel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionModel } from \"../action/actionModel\"\r\nimport { UpdateCardModel } from \"./updateCardModel\"\r\n\r\nexport interface CardModel {\r\n    id: number,\r\n    name: string\r\n    description: string\r\n    dueDate: string\r\n    priority: string\r\n    listCardsName: string | null\r\n    boardId: number\r\n    actions: ActionModel[] | null\r\n  }",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionModel[] | null",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "listCardsName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CardsSieveResponse",
            "id": "interface-CardsSieveResponse-b433c44ceea5cebd404683c8ff122926c7395e824dcb2199c0ab9f422cf93dda349b3d16e63e70e65f7fe77e23e0a9430f27f1f08294f92816d333adc5a099f0",
            "file": "src/app/_models/card/CardsSieveResponse.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CardModel } from \"./cardModel\"\r\n\r\nexport interface CardsSieveResponse {\r\n    items: CardModel[]\r\n    currentPage: number,\r\n    totalPages: number,\r\n    pageSize: number,\r\n    totalCount: number,\r\n    hasPrevious: boolean,\r\n    hasNext: boolean\r\n}",
            "properties": [
                {
                    "name": "currentPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "hasNext",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "hasPrevious",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardModel[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "totalCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreateBoardModel",
            "id": "interface-CreateBoardModel-28b5c9350c45640614fa4a402feb4208f4d542e7d3ce520e03e11a3fefc7f9b09b79978bef59aecad5d8bb6d4ab22438d66416734b5c05553239d54382110a07",
            "file": "src/app/_models/board/createBoardModel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CreateBoardModel {\r\n    name: string\r\n  }",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreateCardModel",
            "id": "interface-CreateCardModel-e05c80dc689c1aa1481dc0e71a94c70401b8bbee67167fb191da73e68fe6ca3f5031469a026bada2da64d9936093b85a113c221e358ad7e70e479023e0456cc0",
            "file": "src/app/_models/card/createCardModel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CreateCardModel {\r\n    name: string\r\n    description: string\r\n    dueDate: string\r\n    priority: string\r\n    listCardsName: string\r\n    boardId: number\r\n  }",
            "properties": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "listCardsName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CreateListCardsModel",
            "id": "interface-CreateListCardsModel-5202ebf61c07518377e538b3a956925294c17645e7bd0e187c4aee223c95da2741849f77f4db02759677567a29bad26215ee721ef7ec5e1dffbee05086c9ca98",
            "file": "src/app/_models/listCards/createListCardsModel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CreateListCardsModel {\r\n    name: string\r\n    boardId: number\r\n  }",
            "properties": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ListCardsModel",
            "id": "interface-ListCardsModel-3bb0efc4a63ebb5525d055b01d4e47ddb8659bf617797355b5d8a023dce8cb36b378b1bc4bf5e87917b4d984dc4e123290916d6eaecc88db7b777df7bae52b40",
            "file": "src/app/_models/listCards/listCardsModel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CardModel } from \"../card/cardModel\"\r\n\r\nexport interface ListCardsModel {\r\n    id: number\r\n    name: string\r\n    boardId: number\r\n    cards: CardModel[] | null\r\n  }",
            "properties": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "cards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardModel[] | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ListsCardsSieveResponse",
            "id": "interface-ListsCardsSieveResponse-80b7813490263dac9868cd64e7ae3d4cd67c61c44521bcb4fc830e94349a875821e1cf6adea1634b3cf7cdb3dbe23df821b4e80c7fbed22e243cbaa2e1d3ab11",
            "file": "src/app/_models/listCards/ListsCardsSieveResponse.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ListCardsModel } from \"./listCardsModel\"\r\n\r\nexport interface ListsCardsSieveResponse {\r\n    items: ListCardsModel[]\r\n    currentPage: number,\r\n    totalPages: number,\r\n    pageSize: number,\r\n    totalCount: number,\r\n    hasPrevious: boolean,\r\n    hasNext: boolean\r\n}",
            "properties": [
                {
                    "name": "currentPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "hasNext",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "hasPrevious",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListCardsModel[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "totalCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateBoardModel",
            "id": "interface-UpdateBoardModel-11ce8c8f40fd749ac5fcc43558f5674169d5e4e2eb76b2f35f983f23e50d87c60e8a899cd169db8c77bc5b4dd619a1e3704343651ba0d0be6492778f2a0631db",
            "file": "src/app/_models/board/updateBoardModel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UpdateBoardModel {\r\n    id: number\r\n    name: string\r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateCardModel",
            "id": "interface-UpdateCardModel-5f842fbaab21c4d590851679b702711abeb2b9ce18d0e6de2a628e9917bce17dcfe1e273121661201d3c1c1f47f1e3d5a7eeca9b8c119e1be032f2c318187b9e",
            "file": "src/app/_models/card/updateCardModel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UpdateCardModel {\r\n    id: number,\r\n    name: string \r\n    description: string \r\n    dueDate: string \r\n    priority: string \r\n    listCardsName: string | null\r\n  }",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "listCardsName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateListCardsModel",
            "id": "interface-UpdateListCardsModel-816ee25525fdcca7d3f2e12a1640c7427e1da2e8f6f6c8e2e67460ad548d4c01f1ac7512e04e5acafe41829d1677b4c5af260c996acfdd8010c3bb5f9bd1db66",
            "file": "src/app/_models/listCards/updateListCardsModel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UpdateListCardsModel {\r\n    id: number\r\n    name: string\r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "ActionsService",
            "id": "injectable-ActionsService-46ecc8fdcdbc1045cf47b990bd4ffcccececcb7d75ef767dbbf9ec3c095c7de47ff5638bff1311e744dd03d8be498a93af4ba3ac13e40b4467dc659b9208847a",
            "file": "src/app/_services/actions.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "getActions",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getActionsByCardId",
                    "args": [
                        {
                            "name": "cardId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadActionsWithNumPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadActionsWithNumPageAndBoardId",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "boardId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "boardId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment.development';\r\nimport { ActionModel } from '../_models/action/actionModel';\r\nimport { ActionsSieveResponse } from '../_models/action/actionsSieveResponse';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActionsService {\r\n  baseUrl = environment.apiUrl;\r\n  \r\n  constructor(private http: HttpClient) { }\r\n\r\n  getActions(){\r\n    return this.http.get<ActionsSieveResponse>(this.baseUrl + 'actions?Sorts=-actionTime')\r\n  }\r\n\r\n  getActionsByCardId(cardId: number){\r\n    return this.http.get<ActionModel[]>(this.baseUrl + 'actions/' + cardId)\r\n  }\r\n\r\n  loadActionsWithNumPage(page: number){\r\n    return this.http.get<ActionsSieveResponse>(this.baseUrl + String('actions?Sorts=-ActionTime&Page=' + page + '&PageSize=20'))\r\n  }\r\n\r\n  loadActionsWithNumPageAndBoardId(page: number, boardId: number){\r\n    return this.http.get<ActionsSieveResponse>(this.baseUrl + String('actions?Filters=boardid==' + boardId +'&Sorts=-ActionTime&Page=' + page + '&PageSize=20'))\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "BoardsService",
            "id": "injectable-BoardsService-daeee879f17fb551408c0a5ba89cc6f44a97b267d847391117e21896ecca52d6ac256071cd2338017f1efedba5b89b1fef5c470cff5d002f3e7b1fbb45a19ec4",
            "file": "src/app/_services/boards.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "createBoard",
                    "args": [
                        {
                            "name": "createBoardModel",
                            "type": "CreateBoardModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "createBoardModel",
                            "type": "CreateBoardModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBoard",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoard",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoardByName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoards",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateBoard",
                    "args": [
                        {
                            "name": "updateBoardModel",
                            "type": "BoardModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "updateBoardModel",
                            "type": "BoardModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ListCardsModel } from '../_models/listCards/listCardsModel';\r\nimport { environment } from 'src/environments/environment.development';\r\nimport { CreateListCardsModel } from '../_models/listCards/createListCardsModel';\r\nimport { BoardModel } from '../_models/board/boardModel';\r\nimport { CreateBoardModel } from '../_models/board/createBoardModel';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BoardsService {\r\n  baseUrl = environment.apiUrl;\r\n  \r\n  constructor(private http: HttpClient) { }\r\n\r\n  getBoards(){\r\n    return this.http.get<BoardModel[]>(this.baseUrl + 'boards/all')\r\n  }\r\n\r\n  getBoard(id: string){\r\n    return this.http.get<BoardModel>(this.baseUrl + 'boards/' + id)\r\n  }\r\n\r\n  getBoardByName(name: string){\r\n    return this.http.get<BoardModel>(this.baseUrl + 'boards/' + name)\r\n  }\r\n\r\n  deleteBoard(id: number){\r\n    return this.http.delete<BoardModel>(this.baseUrl + 'boards/' + id)\r\n  }\r\n\r\n  updateBoard(updateBoardModel: BoardModel){\r\n    return this.http.put<BoardModel>(this.baseUrl + 'boards', updateBoardModel)\r\n  }\r\n\r\n  createBoard(createBoardModel: CreateBoardModel){\r\n    return this.http.post<CreateBoardModel>(this.baseUrl + 'boards', createBoardModel)\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CardEffects",
            "id": "injectable-CardEffects-77c0c7d7b9e521f20d2af87a4d70fa97aab1af48f4e94518eee216ac253e39aab3327e4c3877a17f31e607dd4a6ca6b7e6e1b667b38358deb02c95470c0920d9",
            "file": "src/app/store/cards/card.effects.ts",
            "properties": [
                {
                    "name": "_loadCard",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n        ofType(loadCard),\r\n        switchMap((action) => {\r\n            return this.cardsService.getCard(action.cardId).pipe(\r\n                map((data) => {\r\n                    return loadCardSuccess({card: data});\r\n                }),\r\n                catchError((err)=> EMPTY)\r\n            )\r\n        })\r\n    ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport {Actions, createEffect, ofType} from '@ngrx/effects'\r\nimport { EMPTY, catchError, exhaustMap, map, switchMap } from \"rxjs\";\r\nimport { CardsService } from \"src/app/_services/cards.service\";\r\nimport { loadCard, loadCardSuccess } from \"./card.actions\";\r\n\r\n@Injectable()\r\nexport class CardEffects{\r\n    constructor(private action$: Actions, private cardsService: CardsService){}\r\n\r\n    _loadCard = createEffect(() =>\r\n    this.action$.pipe(\r\n        ofType(loadCard),\r\n        switchMap((action) => {\r\n            return this.cardsService.getCard(action.cardId).pipe(\r\n                map((data) => {\r\n                    return loadCardSuccess({card: data});\r\n                }),\r\n                catchError((err)=> EMPTY)\r\n            )\r\n        })\r\n    ));\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CardsService",
            "id": "injectable-CardsService-276d7ae40e32cf8fa1ad8af89ab0bb953f6b13cf0ff096a0587a30636a0a26993a58c3adada224b43fed7065c93eb9a22dfe421c7fc415bef3c19f5fcd56d849",
            "file": "src/app/_services/cards.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "createCard",
                    "args": [
                        {
                            "name": "createCardModel",
                            "type": "CreateCardModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "createCardModel",
                            "type": "CreateCardModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCard",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCard",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCards",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCardsWithoutParent",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateCard",
                    "args": [
                        {
                            "name": "updateCardModel",
                            "type": "UpdateCardModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "updateCardModel",
                            "type": "UpdateCardModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment.development';\r\nimport { CardModel } from '../_models/card/cardModel';\r\nimport { UpdateCardModel } from '../_models/card/updateCardModel';\r\nimport { CreateCardModel } from '../_models/card/createCardModel';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CardsService {\r\n  baseUrl = environment.apiUrl;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getCards(){\r\n    return this.http.get<CardModel[]>(this.baseUrl + 'cards/all')\r\n  }\r\n\r\n  getCard(id: number){\r\n    return this.http.get<CardModel>(this.baseUrl + 'cards/' + id)\r\n  }\r\n\r\n  deleteCard(id: number){\r\n    return this.http.delete<CardModel>(this.baseUrl + 'cards/' + id)\r\n  }\r\n\r\n  updateCard(updateCardModel: UpdateCardModel){\r\n    return this.http.put<CardModel>(this.baseUrl + 'cards', updateCardModel)\r\n  }\r\n\r\n  createCard(createCardModel: CreateCardModel){\r\n    return this.http.post<CardModel>(this.baseUrl + 'cards', createCardModel)\r\n  }\r\n\r\n  getCardsWithoutParent(){\r\n    return this.http.get<CardModel[]>(this.baseUrl + 'cards/allWithoutParentList')\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ListsCardsService",
            "id": "injectable-ListsCardsService-7c950ff37c336437632eaa175cf0482e2168d9de562a2f8eac98e933ff8b9995ef7e64fb3b10ef6b8328fff989480781077482b2d03290b453a7687d3679fb10",
            "file": "src/app/_services/lists-cards.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "createListCards",
                    "args": [
                        {
                            "name": "createListCardsModel",
                            "type": "CreateListCardsModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "createListCardsModel",
                            "type": "CreateListCardsModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteListCards",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getListCards",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getListsCards",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getListsCardsByBoardId",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateListCards",
                    "args": [
                        {
                            "name": "updateListCardsModel",
                            "type": "ListCardsModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "updateListCardsModel",
                            "type": "ListCardsModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ListCardsModel } from '../_models/listCards/listCardsModel';\r\nimport { environment } from 'src/environments/environment.development';\r\nimport { CreateListCardsModel } from '../_models/listCards/createListCardsModel';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ListsCardsService {\r\n  baseUrl = environment.apiUrl;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getListsCards(){\r\n    return this.http.get<ListCardsModel[]>(this.baseUrl + 'listCards/all')\r\n  }\r\n\r\n  getListsCardsByBoardId(id: number){\r\n    return this.http.get<ListCardsModel[]>(this.baseUrl + 'listCards/allBy/' + id)\r\n  }\r\n\r\n  getListCards(id: number){\r\n    return this.http.get<ListCardsModel>(this.baseUrl + 'listCards/' + id)\r\n  }\r\n\r\n  deleteListCards(id: number){\r\n    return this.http.delete<ListCardsModel>(this.baseUrl + 'listCards/' + id)\r\n  }\r\n\r\n  updateListCards(updateListCardsModel: ListCardsModel){\r\n    return this.http.put<ListCardsModel>(this.baseUrl + 'listCards', updateListCardsModel)\r\n  }\r\n\r\n  createListCards(createListCardsModel: CreateListCardsModel){\r\n    return this.http.post<CreateListCardsModel>(this.baseUrl + 'listCards', createListCardsModel)\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ListsEffects",
            "id": "injectable-ListsEffects-af9bdbbb65adc3f1148bc8d23c0036819b87397d7134d50710a72b06ea5cd829e6f6ef5a8286ae38b10d9b9a43519b6723c4f06b56fcffeb8451650cca229ca2",
            "file": "src/app/store/lists/lists.effects.ts",
            "properties": [
                {
                    "name": "_addList",
                    "defaultValue": "createEffect(()=>\r\n    this.action$.pipe(\r\n        ofType(addList),\r\n        exhaustMap((action) => {\r\n            return this.listsService.createListCards(action.listInput).pipe(\r\n                map((data) => {\r\n                    return addListSuccess({list: data});\r\n                }),\r\n                catchError(()=> EMPTY)\r\n            )\r\n        })\r\n    ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "_loadLists",
                    "defaultValue": "createEffect(() =>\r\n    this.action$.pipe(\r\n        ofType(loadLists),\r\n        switchMap((action) => {\r\n            return this.listsService.getListsCardsByBoardId(action.boardId).pipe(\r\n                map((data) => {\r\n                    return loadListsSuccess({lists: data});\r\n                }),\r\n                catchError((err)=> EMPTY)\r\n            )\r\n        })\r\n    ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport {Actions, createEffect, ofType} from '@ngrx/effects'\r\nimport { ListsCardsService } from \"src/app/_services/lists-cards.service\";\r\nimport { addList, addListSuccess, loadLists, loadListsSuccess } from \"./lists.action\";\r\nimport { EMPTY, catchError, exhaustMap, map, switchMap } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class ListsEffects{\r\n    constructor(private action$: Actions, private listsService: ListsCardsService){}\r\n\r\n    _loadLists = createEffect(() =>\r\n    this.action$.pipe(\r\n        ofType(loadLists),\r\n        switchMap((action) => {\r\n            return this.listsService.getListsCardsByBoardId(action.boardId).pipe(\r\n                map((data) => {\r\n                    return loadListsSuccess({lists: data});\r\n                }),\r\n                catchError((err)=> EMPTY)\r\n            )\r\n        })\r\n    ));\r\n\r\n    _addList = createEffect(()=>\r\n    this.action$.pipe(\r\n        ofType(addList),\r\n        exhaustMap((action) => {\r\n            return this.listsService.createListCards(action.listInput).pipe(\r\n                map((data) => {\r\n                    return addListSuccess({list: data});\r\n                }),\r\n                catchError(()=> EMPTY)\r\n            )\r\n        })\r\n    ));\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "listsService",
                        "type": "ListsCardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "listsService",
                        "type": "ListsCardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "BoardEffects",
            "id": "class-BoardEffects-852e588125d3bdd507d3d930e292fade5bd707c6ea3c5ab7b937365df4750ae4177baab2ec39ed3a3715c87a8e3c3ae479f2f1d4bd2dd4a316f8a5d1dda84f37",
            "file": "src/app/store/boards/board.effects.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport {Actions} from '@ngrx/effects'\r\nimport { BoardsService } from \"../../_services/boards.service\";\r\n\r\nInjectable();\r\nexport class BoardEffects{\r\n    constructor(private action$: Actions, private boardsService: BoardsService){}\r\n\r\n    \r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "action$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "ActionsSidebarComponent",
            "id": "component-ActionsSidebarComponent-9853c7652545cae921eb0777603f7265b62a475e6d612520f60a1e5cb9a7ec0b39eb6ba8299c87451aada7c84f0f2824076eb1010799222544c086a061d54858",
            "file": "src/app/_components/actions/actions-sidebar/actions-sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-actions-sidebar",
            "styleUrls": [
                "./actions-sidebar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./actions-sidebar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionModel[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "boardId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "count",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "length",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "page",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "convertToLocalDate",
                    "args": [
                        {
                            "name": "responseDate",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "responseDate",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadActions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { ActionModel } from 'src/app/_models/action/actionModel';\r\nimport { ActionsService } from 'src/app/_services/actions.service';\r\nimport { BoardsService } from 'src/app/_services/boards.service';\r\n\r\n@Component({\r\n  selector: 'app-actions-sidebar',\r\n  templateUrl: './actions-sidebar.component.html',\r\n  styleUrls: ['./actions-sidebar.component.css']\r\n})\r\nexport class ActionsSidebarComponent implements OnInit{\r\n  actions : ActionModel[] = []\r\n  count:number=1\r\n  page: number = 1\r\n  length: number = 0\r\n  boardId: number = 0\r\n\r\n  constructor(private actionsService: ActionsService,\r\n    private store: Store<{id:{id: number}}>){}\r\n\r\n  ngOnInit(): void {\r\n    this.loadActions();\r\n  }\r\n\r\n  loadActions(){\r\n    this.store.select('id').subscribe(data=> this.boardId = data.id)\r\n    this.actionsService.loadActionsWithNumPageAndBoardId(this.page,this.boardId).subscribe({\r\n      next: response => {\r\n        this.actions = this.actions.concat(response.items);\r\n        this.length=response.totalCount;\r\n      }\r\n    })\r\n    this.page+=1\r\n  }\r\n\r\n  convertToLocalDate(responseDate: any) {\r\n    try {\r\n        if (responseDate != null) {\r\n            var dt = new Date(responseDate)\r\n            return String('on ' + dt.toUTCString().split(' ').slice(0,3).join(' ') + ' at ' + dt.toTimeString().split(' ')[0].split(':').slice(0,2).join(':'));\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (error) {\r\n        return responseDate;\r\n    }\r\n}\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".col{\r\n    display:inline-flex;\r\n    flex-direction: column;\r\n    border-top: 2px;\r\n    border-bottom: 2px;\r\n    border-color: rgba(0,0,0,0.1);;\r\n    border-bottom-style:solid;\r\n    margin-bottom: 10px;\r\n    width: 100%;\r\n}\r\n\r\n.sdbar{\r\n    width: 100%;\r\n    overflow-x: hidden;\r\n}\r\n\r\np{\r\n    padding: 0px;\r\n}\r\n\r\n.scrollSidebar{\r\n    max-height: calc(100vh - 3.5rem);\r\n    overflow-y: auto;\r\n}\r\n\r\n.date{\r\n    color: grey;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.message{\r\n    margin-bottom: 3px;\r\n}\r\n\r\n.history{\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-around;\r\n    gap: 10px;\r\n    padding-left: 30px;\r\n    padding-right: 30px;\r\n    padding-top: 10px;\r\n    padding-bottom: 10px;\r\n    border: 2.22px;\r\n    border-style: dashed;\r\n    border-color: gray;\r\n    background-color: white;\r\n}\r\n\r\n.history:hover{\r\n    background-color: rgba(0,0,0,0.05);\r\n}\r\n\r\nsvg{\r\n    padding-top: 2px;\r\n    margin: 0px;\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./actions-sidebar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actionsService",
                        "type": "ActionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "actionsService",
                        "type": "ActionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div data-bs-scroll=\"true\" data-bs-backdrop=\"true\" tabindex=\"-1\" class=\"sdbar d-flex flex-column align-items-stretch flex-shrink-0 bg-body-tertiary\" >\r\n    <div class=\"offcanvas-header bg-dark sidebar-heading border-bottom\" style=\"height: 56px;\">\r\n            <span style=\"color: aliceblue;\" class=\"fs-5 fw-semibold\">History</span>\r\n            <button type=\"button\" class=\"btn-close btn-close-white text-reset\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"></button>\r\n    </div>\r\n    <div class=\"pt-4 px-3 sdbar scrollSidebar\" style=\"overflow-y: auto;\">\r\n        <div class=\"col\" *ngFor=\"let action of actions\">\r\n            <div [innerHTML]=\"action.message\"></div>\r\n            <p class=\"date\">{{convertToLocalDate(action.actionTime)}}</p>\r\n        </div>\r\n        \r\n        <div style=\"display: flex; margin-bottom: 10px; width: 100%; flex-direction: row; justify-content: center;\">\r\n            <button class=\"history\" *ngIf=\"actions.length<length\"  (click)=\"loadActions()\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"20\" fill=\"black\" class=\"bi bi-arrow-counterclockwise\" viewBox=\"0 0 16 16\">\r\n                <path fill-rule=\"evenodd\" d=\"M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0-.908-.417A6 6 0 1 0 8 2z\"/>\r\n                <path d=\"M8 4.466V.534a.25.25 0 0 0-.41-.192L5.23 2.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 8 4.466\"/>\r\n              </svg>\r\n              <p style=\"margin-bottom: 0px;\">Show more</p>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div> "
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-afa1350517280eeafa55bdbdc808296966be469135d91265079f296c72e74919fc30a59cbbed01c607d673587ff9a70c03286b067257601873125b5d6c1db375",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Task Board'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Task Board';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<app-nav></app-nav>\r\n<div style=\"align-items: flex-start;\" class=\"container\" style=\"margin-top:50px ;\">\r\n    <router-outlet></router-outlet>\r\n</div>\r\n"
        },
        {
            "name": "BoardComponent",
            "id": "component-BoardComponent-ee0ab03d7b7148a74c032bbaa729c2d4e0b87a38ae630901e71d9d7908a2941370707dda78c23e38626fd3194761e5d43f80587ddcb2ddcc84d3453452a97cdf",
            "file": "src/app/_components/boards/board/board.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board",
            "styleUrls": [
                "./board.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./board.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "board",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BoardModel | undefined",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "dialogConfig",
                    "defaultValue": "new MatDialogConfig()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "matDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "modalDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<CreateListCardsModalWindowComponent | any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "loadBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openCreateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BoardModel } from 'src/app/_models/board/boardModel';\r\nimport { BoardsService } from 'src/app/_services/boards.service';\r\nimport { CreateListCardsModalWindowComponent } from '../../lists-cards/create-list-modal-window/create-list-modal-window.component';\r\nimport { MatDialog, MatDialogConfig, MatDialogRef } from '@angular/material/dialog';\r\nimport { Store } from '@ngrx/store';\r\nimport { openBoard } from 'src/app/store/boards/board.actions';\r\nimport { loadLists } from 'src/app/store/lists/lists.action';\r\nimport { ListCardsModel } from 'src/app/_models/listCards/listCardsModel';\r\n\r\n@Component({\r\n  selector: 'app-board',\r\n  templateUrl: './board.component.html',\r\n  styleUrls: ['./board.component.css']\r\n})\r\nexport class BoardComponent implements OnInit{\r\n  board: BoardModel | undefined;\r\n  dialogConfig = new MatDialogConfig();\r\n  modalDialog: MatDialogRef<CreateListCardsModalWindowComponent, any> | undefined;\r\n\r\n  constructor(private boardsService: BoardsService, private route: ActivatedRoute, public matDialog: MatDialog, \r\n    private store: Store<{id:{id: number}, lists:{lists: ListCardsModel[]}}>){}\r\n\r\n  ngOnInit(): void {\r\n    this.loadBoard();\r\n  }\r\n\r\n  loadBoard(){\r\n    var id =  this.route.snapshot.paramMap.get('id');\r\n    if (!id) return;\r\n    this.store.dispatch(openBoard({id:Number(id)}))\r\n    this.boardsService.getBoard(id).subscribe({\r\n      next: board => this.board = board\r\n    })\r\n    this.store.dispatch(loadLists({boardId:Number(id)}));\r\n  }\r\n\r\n  openCreateForm(){\r\n    this.dialogConfig.id = \"projects-modal-component\";\r\n    this.modalDialog = this.matDialog.open(CreateListCardsModalWindowComponent, {\r\n      width: '500px',\r\n      // height: '550px',\r\n      data: {\r\n        boardResponse: this.board?.id\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.dots {\r\n  border: 2.22px;\r\n  border-style: dashed;\r\n  border-color: gray;\r\n  background-color: white;\r\n  width: 15rem;\r\n  margin-bottom: 20px;\r\n  margin-left: 0px;\r\n  padding: 5px;\r\n  font-size: large;\r\n}\r\n\r\n.dots:hover{\r\nbackground-color: rgba(0,0,0,0.05);\r\n}\r\n\r\n.column-container{\r\ndisplay: flex;\r\njustify-content: center;\r\nflex-direction: column;\r\ngap: 10px;\r\n}\r\n\r\n\r\n.col{\r\nwidth: 25%;\r\nalign-items: self-start;\r\ndisplay: inline;\r\n}\r\n\r\n.lCards{\r\ndisplay: grid; \r\ngap:50px;\r\njustify-content: space-between;\r\ngrid-template-columns: repeat(4, 23%);\r\nwidth: 100%;\r\n}\r\n\r\n@media screen and (max-width: 1300px) {\r\n.lCards {\r\n  display: grid; \r\n  justify-content: space-between;\r\n  column-gap: 50px;\r\n  grid-template-columns: repeat(3, 30%);\r\n}\r\n}\r\n\r\n@media screen and (max-width: 880px) {\r\n.lCards {\r\n  display: grid; \r\n  justify-content: space-between;\r\n  column-gap: 50px;\r\n  grid-template-columns: repeat(2, 48%);\r\n}\r\n}\r\n\r\n@media screen and (max-width: 580px) {\r\n.lCards {\r\n  display: flex; \r\n  flex-direction: column;\r\n  justify-content: center;\r\n  grid-template-columns: repeat(1, 100%);\r\n}\r\n.column-container{\r\n  padding-left: 70px;\r\n}\r\n}",
                    "styleUrl": "./board.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"column-container\">\r\n    <button (click)=\"openCreateForm()\" class=\"dots\" data-initialized=\"true\">\r\n        Add list\r\n    </button>\r\n<div *ngIf=\"(board?.listsCards) as listsCards\" class=\"lCards\">\r\n    <div class=\"col mb-4\" *ngFor=\"let listCards of listsCards\">\r\n        <app-list-cards [listCards]=\"listCards\"></app-list-cards>\r\n    </div>\r\n</div>\r\n</div>"
        },
        {
            "name": "BoardContextMenuComponent",
            "id": "component-BoardContextMenuComponent-a1f2b49b1c20ae8dd8b0b2c54bf38dc98fbc09cb9700839f9faefecb41a18bf0e4752948c334e70d7b4b7a18cfbd23e42520b1566b3a916dc237de07d37783ab",
            "file": "src/app/_components/boards/board-context-menu/board-context-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board-context-menu",
            "styleUrls": [
                "./board-context-menu.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./board-context-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogConfig",
                    "defaultValue": "new MatDialogConfig()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "items",
                    "defaultValue": "[\r\n    {\r\n    label: 'Edit',\r\n    command: () => this.openEditForm()\r\n  },\r\n  {\r\n    label: 'Delete',\r\n    command: () => this.openDeletePopup()\r\n  }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "matDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "modalDialogDelete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<DeleteBoardModalWindowComponent | any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "modalDialogEdit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<EditBoardModalWindowComponent | any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "openDeletePopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEditForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Inject, Input, ViewChild } from '@angular/core';\r\nimport { MatDialog, MatDialogConfig, MatDialogRef } from '@angular/material/dialog';\r\nimport { MenuItem } from 'primeng/api';\r\nimport { BoardsService } from 'src/app/_services/boards.service';\r\nimport { ListsCardsService } from 'src/app/_services/lists-cards.service';\r\nimport { DeleteBoardModalWindowComponent } from '../delete-board-modal-window/delete-board-modal-window.component';\r\nimport { EditBoardModalWindowComponent } from '../edit-board-modal-window/edit-board-modal-window.component';\r\n\r\n@Component({\r\n  selector: 'app-board-context-menu',\r\n  templateUrl: './board-context-menu.component.html',\r\n  styleUrls: ['./board-context-menu.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class BoardContextMenuComponent {\r\n  @Input() target: any;\r\n  @Input() id: any;\r\n  dialogConfig = new MatDialogConfig();\r\n  modalDialogEdit: MatDialogRef<EditBoardModalWindowComponent, any> | undefined;\r\n  modalDialogDelete: MatDialogRef<DeleteBoardModalWindowComponent, any> | undefined;\r\n\r\n  constructor(private boardsCards: BoardsService, public matDialog: MatDialog){\r\n\r\n  }\r\n\r\n  items: MenuItem[] = [\r\n    {\r\n    label: 'Edit',\r\n    command: () => this.openEditForm()\r\n  },\r\n  {\r\n    label: 'Delete',\r\n    command: () => this.openDeletePopup()\r\n  }\r\n  ]\r\n\r\n  openEditForm(){\r\n    this.dialogConfig.id = \"projects-modal-component\";\r\n    this.modalDialogEdit = this.matDialog.open(EditBoardModalWindowComponent, {\r\n      width: '500px',\r\n      // height: '550px',\r\n      data: {\r\n        boardResponse: this.id\r\n      }\r\n    });\r\n  }\r\n\r\n  openDeletePopup(){\r\n    this.dialogConfig.id = \"projects-modal-component\";\r\n    this.modalDialogDelete = this.matDialog.open(DeleteBoardModalWindowComponent, {\r\n      // width: '500px',\r\n      // height: '550px',\r\n      data: {\r\n        boardResponse: this.id\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./board-context-menu.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "boardsCards",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "boardsCards",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<p-contextMenu\r\n    [model]=\"items\"\r\n    [target] = \"target\"\r\n    [appendTo]= \"'body'\"\r\n    triggerEvent=\"click\"\r\n    [id] = \"id\">\r\n</p-contextMenu>\r\n"
        },
        {
            "name": "BoardListComponent",
            "id": "component-BoardListComponent-1ce6c185f2a2cb527c4ac749abab04e12cbd8ed762d7f6ee8431dd2c6cd88fe3d676856a05ce0218da6f19df2e251c30d50ca4ee905e07edb7101a244f10cc97",
            "file": "src/app/_components/boards/board-list/board-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board-list",
            "styleUrls": [
                "./board-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./board-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "boards$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<BoardModel[]>",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "dialogConfig",
                    "defaultValue": "new MatDialogConfig()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "matDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "modalDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<CreateBoardModalWindowComponent | any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "loadBoards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openBoardPage",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openCreateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog, MatDialogConfig, MatDialogRef } from '@angular/material/dialog';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { BoardModel } from 'src/app/_models/board/boardModel';\r\nimport { BoardsService } from 'src/app/_services/boards.service';\r\nimport { CreateBoardModalWindowComponent } from '../create-board-modal-window/create-board-modal-window.component';\r\nimport { Store } from '@ngrx/store';\r\nimport { openBoard } from 'src/app/store/boards/board.actions';\r\n\r\n@Component({\r\n  selector: 'app-board-list',\r\n  templateUrl: './board-list.component.html',\r\n  styleUrls: ['./board-list.component.css']\r\n})\r\nexport class BoardListComponent implements OnInit{\r\n  boards$? : Observable<BoardModel[]>\r\n  dialogConfig = new MatDialogConfig();\r\n  modalDialog: MatDialogRef<CreateBoardModalWindowComponent, any> | undefined;\r\n\r\n  constructor(private boardsService: BoardsService, public matDialog: MatDialog, \r\n    private store: Store<{id:{id: number}}>)\r\n    {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadBoards();\r\n  }\r\n    \r\n  loadBoards(){\r\n    this.boards$ = this.boardsService.getBoards()\r\n  }\r\n\r\n  openBoardPage(id: number){\r\n    this.store.dispatch(openBoard({id:id}))\r\n  }\r\n\r\n  openCreateForm(){\r\n    this.dialogConfig.id = \"projects-modal-component\";\r\n    this.modalDialog = this.matDialog.open(CreateBoardModalWindowComponent, {\r\n      width: '500px',\r\n      // height: '550px',\r\n      data: {\r\n        \r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card{\r\n    margin-right:20px!important;\r\n    margin-top:10px!important;\r\n    }\r\n\r\n.row-container{\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: first baseline;\r\n}\r\n\r\nh4{\r\n  width: 170px;\r\n}\r\n\r\n.bi:hover, bi:focus{\r\n  fill: darkslategrey\r\n}\r\n\r\n.selectStyle{\r\n  background-color: rgba(0, 0, 0, 0.05);\r\n  font-size: medium;\r\n}\r\n\r\n.optionStyle{\r\n  font-size: medium;\r\n}\r\n\r\n.card-priority{\r\n  font-size: medium;\r\n  padding: 5px;\r\n  width: max-content;\r\n  color:rgba(0, 0, 0, 0.4);\r\n  background-color:aliceblue;\r\n  border-radius: 20%;\r\n  margin-bottom: 5px;\r\n}\r\n\r\nh4, .card-description{\r\n  margin-bottom: 5px;\r\n  margin-left: 5px;\r\n}\r\n\r\n.card-description{\r\n  font-size: small;\r\n  color: lightslategray;\r\n}\r\n\r\n.dueDate{\r\n  display: flex;\r\n  width: fit-content;\r\n  flex-direction: row;\r\n  gap: 10px;\r\n  margin-bottom: 5px;\r\n  padding: 5px;\r\n  background-color: rgba(0, 0, 0, 0.04);\r\n}\r\n\r\n.h6dd{\r\n  font-size: medium;\r\n  margin: 0px;\r\n}\r\n\r\n.col{\r\nwidth: 20%;\r\nalign-items: self-start;\r\ndisplay: inline;\r\ngap: 10px;\r\n}\r\n  \r\n.bi:hover, bi:focus{\r\nfill: darkslategrey\r\n}\r\n\r\nsvg{\r\nmargin-bottom: 3px;\r\nmargin-left: 15px;\r\n}\r\n\r\n.row-container{\r\ndisplay: flex;\r\nwidth:min-content;\r\nflex-direction: row;\r\njustify-content: space-between;\r\nalign-items: first baseline;\r\nmargin-right: 15px;\r\npadding-left: 8px;\r\npadding-right: 5px;\r\nborder-radius: 0%;\r\nvertical-align: middle;\r\n}\r\n\r\nh2{\r\nmargin-bottom: 5px;\r\nwidth: 185px;\r\n}\r\n\r\nh3{\r\nmargin-top: 0px;\r\nmargin-bottom: 5px;\r\n}\r\n\r\n\r\n.dots {\r\n    border: 2.22px;\r\n  border-style: dashed;\r\n  border-color: gray;\r\n  background-color: white;\r\n  width: 15rem;\r\n  margin-bottom: 20px;\r\n  margin-left: 0px;\r\n  padding: 5px;\r\n  font-size: large;\r\n}\r\n\r\n.dots:hover{\r\nbackground-color: rgba(0,0,0,0.05);\r\n}\r\n\r\n.column-container{\r\ndisplay: flex;\r\njustify-content: center;\r\nflex-direction: column;\r\ngap: 10px;\r\n}\r\n\r\n\r\n.col{\r\nwidth: 25%;\r\nalign-items: self-start;\r\ndisplay: inline;\r\n}\r\n\r\n.lCards{\r\ndisplay: grid; \r\ngap:50px;\r\njustify-content: space-between;\r\ngrid-template-columns: repeat(4, 23%);\r\nwidth: 100%;\r\n}\r\n\r\n@media screen and (max-width: 1300px) {\r\n.lCards {\r\n  display: grid; \r\n  justify-content: space-between;\r\n  column-gap: 50px;\r\n  grid-template-columns: repeat(3, 30%);\r\n}\r\n}\r\n\r\n@media screen and (max-width: 880px) {\r\n.lCards {\r\n  display: grid; \r\n  justify-content: space-between;\r\n  column-gap: 50px;\r\n  grid-template-columns: repeat(2, 48%);\r\n}\r\n}\r\n\r\n@media screen and (max-width: 580px) {\r\n.lCards {\r\n  display: flex; \r\n  flex-direction: column;\r\n  justify-content: center;\r\n  grid-template-columns: repeat(1, 100%);\r\n}\r\n.column-container{\r\n  padding-left: 70px;\r\n}\r\n}",
                    "styleUrl": "./board-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"column-container\">\r\n    <button (click)=\"openCreateForm()\" class=\"dots\" data-initialized=\"true\">\r\n        Add board\r\n    </button>\r\n<div *ngIf=\"(boards$ | async) as boards\" class=\"lCards\">\r\n    <div class=\"col mb-4\" *ngFor=\"let board of boards\">\r\n        <div class=\"card\" *ngIf=\"board\" style=\"width: 15rem;\">\r\n            <div class=\"card-body col p-10\">\r\n              <div class=\"row-container\">\r\n                <h4 style=\"cursor: pointer;\" (click)=\"openBoardPage(board.id)\" routerLink=\"/boards/{{board.id}}\" routerLinkActive=\"active\">{{board.name}}</h4>\r\n                <a #openMenu href=\"{{board.id}}\">\r\n                <svg  aria-haspopup=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"black\" id=\"openMenu\" class=\"bi bi-three-dots-vertical\" viewBox=\"0 0 16 16\">\r\n                  <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0\"/>\r\n                </svg></a>\r\n                <app-board-context-menu [id]=\"board.id\" [target]=\"openMenu\"></app-board-context-menu>\r\n              </div>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-86e2311c54fbca7431c12e070d0fd5b0ebe343eec0553a392f182ba0e04a8f86613233d26ee47718fd0e7a65078f580c76a1fcc928ce55de81193d6618025bc4",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 798,
                            "end": 811,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 799,
                                "end": 807,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 35,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-01ce2008104f90138b61cce5a5e4237b7909918ccfacc4933894240a36de8838d3987fc7f40f92053ca6eb4aedec8109770f110428d175ae79d2e190219c4a02",
            "file": "src/app/_components/cards/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "card",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "CardModel | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardModel",
                    "defaultValue": "{id: 0, name: '', description: '', priority: '', listCardsName: '', dueDate: ''}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UpdateCardModel",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "dialogConfig",
                    "defaultValue": "new MatDialogConfig()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "listsCards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListCardsModel[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "matDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "modalDialogView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ViewCardModalWindowComponent | any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "convertToLocalDate",
                    "args": [
                        {
                            "name": "responseDate",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "responseDate",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadLists",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openViewCardWindow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateCard",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialog, MatDialogConfig, MatDialogRef } from '@angular/material/dialog';\r\nimport { CardModel } from 'src/app/_models/card/cardModel';\r\nimport { CardsService } from 'src/app/_services/cards.service';\r\nimport { UpdateCardModel } from 'src/app/_models/card/updateCardModel';\r\nimport { ListCardsModel } from 'src/app/_models/listCards/listCardsModel';\r\nimport { ViewCardModalWindowComponent } from '../view-card-modal-window/view-card-modal-window.component';\r\nimport { Store } from '@ngrx/store';\r\nimport { loadCard } from 'src/app/store/cards/card.actions';\r\n\r\n@Component({\r\n  selector: 'app-card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.component.css']\r\n})\r\nexport class CardComponent implements OnInit{\r\n  @Input() card: CardModel | undefined;\r\n  @Input() boardId: any;\r\n  listsCards : ListCardsModel[] = [];\r\n  cardModel: UpdateCardModel = {id: 0, name: '', description: '', priority: '', listCardsName: '', dueDate: ''}\r\n  value : string = ''\r\n  dialogConfig = new MatDialogConfig();\r\n  modalDialogView: MatDialogRef<ViewCardModalWindowComponent, any> | undefined;\r\n\r\n  constructor(private cardsService: CardsService, public matDialog: MatDialog,\r\n    private store: Store<{lists:{lists: ListCardsModel[]}, card:{card:CardModel}}>){}\r\n\r\n  ngOnInit(): void {\r\n    this.loadLists();\r\n  }\r\n\r\n  loadLists(){\r\n    try{\r\n      this.store.select('lists').subscribe(data=> this.listsCards = data.lists.filter(el => el.name!==this.card?.listCardsName));\r\n    }\r\n    catch(err){\r\n        console.log(err);\r\n    }\r\n}\r\n\r\n  updateCard(newValue: string | null){\r\n    if(this.card ){\r\n      this.cardModel = this.card\r\n      this.cardModel.listCardsName = newValue\r\n      this.cardsService.updateCard(this.cardModel).subscribe({\r\n        next: _ => {\r\n          window.location.reload();\r\n        }\r\n      })\r\n    }\r\n    else console.log(this.value, 'wrong')\r\n  }\r\n\r\n  openViewCardWindow(){\r\n    if (this.card)\r\n    this.store.dispatch(loadCard({cardId:this.card.id}));\r\n    this.dialogConfig.id = \"projects-modal-component\";\r\n    this.modalDialogView = this.matDialog.open(ViewCardModalWindowComponent, {\r\n      width: '800px',\r\n      height: '500px',\r\n      data: {\r\n        cardResponse: this.card?.id,\r\n        boardResponse: this.boardId\r\n      }\r\n    });\r\n  }\r\n\r\n  convertToLocalDate(responseDate: any) {\r\n    try {\r\n        if (responseDate != null) {\r\n            var dt = new Date(responseDate)\r\n            dt.setHours(dt.getHours()+5);\r\n            return String(dt.toUTCString().split(' ').slice(0,3).join(' '));\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (error) {\r\n        return responseDate;\r\n    }\r\n}\r\n \r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card{\r\n    margin-right:20px!important;\r\n    margin-top:10px!important;\r\n    }\r\n\r\n.row-container{\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: first baseline;\r\n}\r\n\r\nh4{\r\n  width: 170px;\r\n}\r\n\r\n.bi:hover, bi:focus{\r\n  fill: darkslategrey\r\n}\r\n\r\n.selectStyle{\r\n  background-color: rgba(0, 0, 0, 0.05);\r\n  font-size: medium;\r\n}\r\n\r\n.optionStyle{\r\n  font-size: medium;\r\n}\r\n\r\n.card-priority{\r\n  font-size: medium;\r\n  padding: 5px;\r\n  width: max-content;\r\n  color:rgba(0, 0, 0, 0.4);\r\n  background-color:aliceblue;\r\n  border-radius: 20%;\r\n  margin-bottom: 5px;\r\n}\r\n\r\nh4, .card-description{\r\n  margin-bottom: 5px;\r\n  margin-left: 5px;\r\n}\r\n\r\n.card-description{\r\n  font-size: small;\r\n  color: lightslategray;\r\n}\r\n\r\n.dueDate{\r\n  display: flex;\r\n  width: fit-content;\r\n  flex-direction: row;\r\n  gap: 10px;\r\n  margin-bottom: 5px;\r\n  padding: 5px;\r\n  background-color: rgba(0, 0, 0, 0.04);\r\n}\r\n\r\n.h6dd{\r\n  font-size: medium;\r\n  margin: 0px;\r\n}\r\n\r\n",
                    "styleUrl": "./card.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\" *ngIf=\"card\" style=\"width: 15rem;\">\r\n    <div class=\"card-body col p-10\">\r\n      <div class=\"row-container\">\r\n        <h4 style=\"cursor: pointer;\" (click)=\"openViewCardWindow()\"  class=\"card-title\">{{card.name}}</h4>\r\n        <a #openMenu href=\"{{card.id}}\">\r\n        <svg  aria-haspopup=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"black\" id=\"openMenu\" class=\"bi bi-three-dots-vertical\" viewBox=\"0 0 16 16\">\r\n          <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0\"/>\r\n        </svg></a>\r\n        <app-card-context-menu [boardId]=\"card.boardId\" [id]=\"card.id\" [target]=\"openMenu\"></app-card-context-menu>\r\n      </div>\r\n      <p class=\"card-description\">{{card.description}}</p>\r\n      <h6 class=\"card-priority\">{{card.priority}}</h6>\r\n      <div class=\"dueDate\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"20\" fill=\"currentColor\" class=\"bi bi-calendar-event\" viewBox=\"0 0 16 16\">\r\n        <path d=\"M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5z\"/>\r\n        <path d=\"M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5M1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4z\"/>\r\n      </svg>\r\n      <h6 class=\"h6dd\">{{convertToLocalDate(card.dueDate)}}</h6>\r\n    </div>\r\n      <ng-container class=\"col-sm-10\" *ngIf=\"listsCards\">\r\n        <select name=\"listCardsName\" [ngModel]=\"value\" (ngModelChange)=\"updateCard($event)\" class=\"form-control selectStyle\">\r\n          <option style=\"display: flex; flex-direction: row; justify-content: space-between;\" value=\"\" hidden selected disabled>\r\n            <p>Move To:</p> \r\n        </option>\r\n            <option class=\"optionStyle\" *ngFor=\"let listCards of listsCards\">\r\n            {{listCards.name}}\r\n            </option>\r\n        </select>\r\n    </ng-container>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "CardContextMenuComponent",
            "id": "component-CardContextMenuComponent-c4b93bc9e0463bbf80a83a569bb92f9584c866b04aca4d0754b5a414435f1573ba3f02650ea987e3350c7764b72421e94fa4de6e472d508b593b441ceb56b77f",
            "file": "src/app/_components/cards/card-context-menu/card-context-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-context-menu",
            "styleUrls": [
                "./card-context-menu.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card-context-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "boardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogConfig",
                    "defaultValue": "new MatDialogConfig()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "items",
                    "defaultValue": "[\r\n    {\r\n    label: 'Edit',\r\n    command: () => this.openEditForm()\r\n  },\r\n  {\r\n    label: 'Delete',\r\n    command: () => this.openDeletePopup()\r\n  }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "matDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "modalDialogDelete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<DeleteCardModalWindowComponent | any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "modalDialogEdit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<EditCardModalWindowComponent | any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "openDeletePopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEditForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Inject, Input, ViewChild } from '@angular/core';\r\nimport { MatDialog, MatDialogConfig, MatDialogRef } from '@angular/material/dialog';\r\nimport { MenuItem } from 'primeng/api';\r\nimport { CardsService } from 'src/app/_services/cards.service';\r\nimport { EditCardModalWindowComponent } from '../edit-card-modal-window/edit-card-modal-window.component';\r\nimport { DeleteCardModalWindowComponent } from '../delete-card-modal-window/delete-card-modal-window.component';\r\n\r\n@Component({\r\n  selector: 'app-card-context-menu',\r\n  templateUrl: './card-context-menu.component.html',\r\n  styleUrls: ['./card-context-menu.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class CardContextMenuComponent {\r\n  @Input() target: any;\r\n  @Input() id: any;\r\n  @Input() boardId: any;\r\n  dialogConfig = new MatDialogConfig();\r\n  modalDialogEdit: MatDialogRef<EditCardModalWindowComponent, any> | undefined;\r\n  modalDialogDelete: MatDialogRef<DeleteCardModalWindowComponent, any> | undefined;\r\n\r\n  constructor(private cardsService: CardsService, public matDialog: MatDialog){\r\n\r\n  }\r\n\r\n  items: MenuItem[] = [\r\n    {\r\n    label: 'Edit',\r\n    command: () => this.openEditForm()\r\n  },\r\n  {\r\n    label: 'Delete',\r\n    command: () => this.openDeletePopup()\r\n  }\r\n  ]\r\n\r\n  openEditForm(){\r\n    this.dialogConfig.id = \"projects-modal-component\";\r\n    this.modalDialogEdit = this.matDialog.open(EditCardModalWindowComponent, {\r\n      // width: '500px',\r\n      // height: '550px',\r\n      data: {\r\n        cardResponse: this.id,\r\n        boardResponse: this.boardId\r\n      }\r\n    });\r\n  }\r\n\r\n  openDeletePopup(){\r\n    this.dialogConfig.id = \"projects-modal-component\";\r\n    this.modalDialogDelete = this.matDialog.open(DeleteCardModalWindowComponent, {\r\n      // width: '500px',\r\n      // height: '550px',\r\n      data: {\r\n        cardResponse: this.id\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./card-context-menu.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<p-contextMenu\r\n    [model]=\"items\"\r\n    [target] = \"target\"\r\n    [appendTo]= \"'body'\"\r\n    triggerEvent=\"click\"\r\n    [id] = \"id\">\r\n</p-contextMenu>\r\n"
        },
        {
            "name": "CreateBoardModalWindowComponent",
            "id": "component-CreateBoardModalWindowComponent-02a97a34290c16f549817afe5a279fa49a56e8ffb10d0d475fbdabd961e5ea23859eca21fec616996c86a46638894d5d15b185dc4051558025d94ae197d3cb76",
            "file": "src/app/_components/boards/create-board-modal-window/create-board-modal-window.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-board-modal-window",
            "styleUrls": [
                "./create-board-modal-window.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./create-board-modal-window.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "boardModel",
                    "defaultValue": "{name: ''}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CreateBoardModel",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "createForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgForm | undefined",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'createForm'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<CreateBoardModalWindowComponent>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\r\nimport { NgForm } from '@angular/forms';\r\nimport { CreateListCardsModel } from 'src/app/_models/listCards/createListCardsModel';\r\nimport { CreateBoardModel } from 'src/app/_models/board/createBoardModel';\r\nimport { BoardsService } from 'src/app/_services/boards.service';\r\n\r\n@Component({\r\n  selector: 'app-create-board-modal-window',\r\n  templateUrl: './create-board-modal-window.component.html',\r\n  styleUrls: ['./create-board-modal-window.component.css']\r\n})\r\nexport class CreateBoardModalWindowComponent{\r\n  boardModel: CreateBoardModel = {name: ''};\r\n  @ViewChild('createForm') createForm: NgForm | undefined;\r\n  errors: string[] = [];\r\n\r\n  constructor(\r\n    private boardsService: BoardsService,\r\n    public dialogRef: MatDialogRef<CreateBoardModalWindowComponent>, \r\n    @Inject(MAT_DIALOG_DATA) public data: any){}\r\n\r\n  createBoard(){\r\n      this.boardsService.createBoard(this.createForm?.value).subscribe(\r\n        next => {\r\n          this.closeModal();\r\n          window.location.reload();\r\n      },\r\n        err =>{\r\n          this.errors = [];\r\n          console.log(err.error);\r\n          try{\r\n            let validationErrorDictionary = JSON.parse(JSON.stringify(err.error.errors));\r\n            for (var fieldName in validationErrorDictionary) {\r\n              if (validationErrorDictionary.hasOwnProperty(fieldName)) {\r\n                this.errors.push(validationErrorDictionary[fieldName]);\r\n              }\r\n          }\r\n          }\r\n          catch{\r\n            let validationErrorDictionary = JSON.parse(JSON.stringify(err.error));\r\n            for (var fieldName in validationErrorDictionary) {\r\n              if (validationErrorDictionary.hasOwnProperty(fieldName)) {\r\n                this.errors.push(validationErrorDictionary[fieldName]);\r\n              }\r\n          }\r\n          }\r\n      })\r\n  }\r\n    \r\n  closeModal() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#modal-content-wrapper {\r\n    background-color: white;\r\n    opacity: 100%;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flexbox;\r\n}#modal-title {\r\n    font-size: 22px;\r\n}#modal-footer {\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 100%;\r\n    justify-content:center;\r\n    gap: 20px;\r\n    margin-top: 40px;\r\n    position: relative;\r\n}#modal-close-button {\r\n    background-color: #ce0909;\r\n}\r\n\r\n.row-container{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 20px;\r\n    justify-content:flex-start;\r\n    align-items: first baseline;\r\n  }\r\n\r\n  .form-control{\r\n    width: 40%;\r\n  }\r\n\r\n  button {\r\n    width: 150px;\r\n    padding: 0;\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  form {\r\n    position: relative;\r\n    margin: 0 auto;\r\n    padding: 1em;\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n  }\r\n\r\n  .no-border {\r\n    border: none;\r\n    display: inline;\r\n    font-family: inherit;\r\n    font-size: inherit;\r\n    padding: none;\r\n    width: 100%;\r\n    outline: none;\r\n  }\r\n\r\n  input:focus{\r\n    outline: none;\r\n  }\r\n\r\n  label{\r\n    width: 100px;\r\n  }",
                    "styleUrl": "./create-board-modal-window.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CreateBoardModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CreateBoardModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"p-4\" id=\"modal-content-wrapper\">\r\n    <div class=\"alert alert-warning alert-dismissible fade show\" *ngIf=\"createForm.dirty\"> \r\n        <strong>You made changes. Any unsaved changes will be lost</strong>\r\n    </div>\r\n    <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"errors.length > 0\">\r\n        <ul style=\"margin-bottom: 0px;\">\r\n          <li *ngFor=\"let error of errors\">\r\n            {{ error }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    <form (ngSubmit)=\"createBoard()\" id=\"createForm\" #createForm=\"ngForm\">\r\n        <h2><input name=\"name\" class=\"no-border\" value=\"New list\" [(ngModel)]=\"boardModel.name\" placeholder=\"Enter board's name\" (focus)=\"false\" type=\"text\" /></h2>\r\n    </form> \r\n     <footer id=\"modal-footer\">\r\n        <button mat-raised-button [disabled]=\"!createForm.dirty || boardModel.name===''\" form=\"createForm\" type=\"submit\" id=\"modal-close-button\" >Save</button>\r\n        <button mat-raised-button id=\"modal-save-button\" (click)=\"closeModal()\">Cancel</button>\r\n    </footer>\r\n</div> "
        },
        {
            "name": "CreateCardModalWindowComponent",
            "id": "component-CreateCardModalWindowComponent-40a78dc4ae2c79e015a3ac70f75854426b0ef09605ee81b4749b3bab7bce1ea8e0a63ccb9f9080fb850623a1961dde9032aa8db9ebdde94ebd8e3078e76a9e3f",
            "file": "src/app/_components/cards/create-card-modal-window/create-card-modal-window.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-card-modal-window",
            "styleUrls": [
                "./create-card-modal-window.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./create-card-modal-window.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardModel",
                    "defaultValue": "{name: '', description: '', priority: '', listCardsName: '', boardId:0, dueDate: new Date().toISOString().substring(0, 10)}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CreateCardModel",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "createForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgForm | undefined",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'createForm'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dateMin",
                    "defaultValue": "new Date().toISOString().substring(0, 10)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<CreateCardModalWindowComponent>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "listsCards$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ListCardsModel[]>",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "priorities",
                    "defaultValue": "Object.values(Priority)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "priorityStrings",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadLists",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { UpdateCardModel } from 'src/app/_models/card/updateCardModel';\r\nimport { CardsService } from 'src/app/_services/cards.service';\r\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\r\nimport { CardModel } from 'src/app/_models/card/cardModel';\r\nimport { ListsCardsService } from 'src/app/_services/lists-cards.service';\r\nimport { ListCardsModel } from 'src/app/_models/listCards/listCardsModel';\r\nimport { Observable } from 'rxjs';\r\nimport {Priority} from 'src/app/_models/priority/priority';\r\nimport { DatePipe } from '@angular/common';\r\nimport { NgForm } from '@angular/forms';\r\nimport { AppComponent } from 'src/app/app.component';\r\nimport { CreateCardModel } from 'src/app/_models/card/createCardModel';\r\n\r\n@Component({\r\n  selector: 'app-create-card-modal-window',\r\n  templateUrl: './create-card-modal-window.component.html',\r\n  styleUrls: ['./create-card-modal-window.component.css']\r\n})\r\nexport class CreateCardModalWindowComponent implements OnInit{\r\n  cardModel: CreateCardModel = {name: '', description: '', priority: '', listCardsName: '', boardId:0, dueDate: new Date().toISOString().substring(0, 10)}\r\n  listsCards$? : Observable<ListCardsModel[]>\r\n  errors: string[] = []\r\n  priorities = Object.values(Priority);\r\n  priorityStrings : string[]= []\r\n  dateMin: string = new Date().toISOString().substring(0, 10);\r\n  @ViewChild('createForm') createForm: NgForm | undefined\r\n\r\n  constructor(\r\n    private cardsService: CardsService, \r\n    private listsCardsService: ListsCardsService,\r\n    public dialogRef: MatDialogRef<CreateCardModalWindowComponent>, \r\n    @Inject(MAT_DIALOG_DATA) public data: any){}\r\n\r\n  ngOnInit(): void {\r\n    this.loadLists()\r\n    this.priorities.forEach(prioritiy => {this.priorityStrings.push(String(prioritiy))\r\n    });\r\n    this.cardModel.listCardsName=this.data.cardResponse;//.trim();\r\n    this.cardModel.boardId = Number(this.data.boardResponse);\r\n  }\r\n\r\n  createCard(){\r\n    this.cardsService.createCard(this.createForm?.value).subscribe(\r\n      next => {\r\n        this.closeModal();\r\n        window.location.reload();\r\n      },\r\n      err =>{\r\n        this.errors = [];\r\n        let validationErrorDictionary = JSON.parse(JSON.stringify(err.error.errors));\r\n        for (var fieldName in validationErrorDictionary) {\r\n          if (validationErrorDictionary.hasOwnProperty(fieldName)) {\r\n            this.errors.push(validationErrorDictionary[fieldName]);\r\n          }\r\n      }}\r\n    )\r\n  }\r\n\r\n  loadLists(){\r\n    this.listsCards$=this.listsCardsService.getListsCardsByBoardId(Number(this.data.boardResponse));\r\n  }\r\n    \r\n  closeModal() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#modal-content-wrapper {\r\n    background-color: white;\r\n    opacity: 100%;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flexbox;\r\n}#modal-title {\r\n    font-size: 22px;\r\n}#modal-footer {\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 100%;\r\n    justify-content:center;\r\n    gap: 20px;\r\n    margin-top: 40px;\r\n    position: relative;\r\n}#modal-close-button {\r\n    background-color: #ce0909;\r\n}\r\n\r\n.row-container{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 20px;\r\n    justify-content:flex-start;\r\n    align-items: first baseline;\r\n  }\r\n\r\n  .form-control{\r\n    width: 40%;\r\n  }\r\n\r\n  button {\r\n    width: 150px;\r\n    padding: 0;\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  form {\r\n    position: relative;\r\n    margin: 0 auto;\r\n    padding: 1em;\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n  }\r\n\r\n  .no-border {\r\n    border: none;\r\n    display: inline;\r\n    font-family: inherit;\r\n    font-size: inherit;\r\n    padding: none;\r\n    width: 100%;\r\n    outline: none;\r\n  }\r\n\r\n  input:focus{\r\n    outline: none;\r\n  }\r\n\r\n  label{\r\n    width: 100px;\r\n  }",
                    "styleUrl": "./create-card-modal-window.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "listsCardsService",
                        "type": "ListsCardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CreateCardModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "listsCardsService",
                        "type": "ListsCardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CreateCardModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"p-4\" id=\"modal-content-wrapper\">\r\n    <div class=\"alert alert-warning alert-dismissible fade show\" *ngIf=\"createForm.dirty\">\r\n        <strong>You made changes. Any unsaved changes will be lost</strong>\r\n    </div>\r\n    <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"errors.length > 0\">\r\n        <ul style=\"margin-bottom: 0px;\">\r\n          <li *ngFor=\"let error of errors\">\r\n            {{ error }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    <form (ngSubmit)=\"createCard()\" id=\"createForm\" #createForm=\"ngForm\">\r\n        <input [hidden]=\"true\" type=\"text\" name=\"boardId\" [(ngModel)]=\"cardModel.boardId\">\r\n        <h2><input name=\"name\" class=\"no-border\" value=\"New card\" [(ngModel)]=\"cardModel.name\" placeholder=\"Enter card's name\" (focus)=\"false\" type=\"text\" /></h2>\r\n        <div class=\"form-group row\">\r\n            <label class=\"col-sm-2 col-form-label\">List</label>\r\n            <ng-container class=\"col-sm-10\" *ngIf=\"listsCards$ | async as listsCards\">\r\n                <select placeholder=\"Choose list\" name=\"listCardsName\" class=\"form-control\" [(ngModel)]=\"cardModel.listCardsName\">\r\n                    <option *ngFor=\"let listCards of listsCards\">\r\n                    {{listCards.name}}\r\n                    </option>\r\n                </select>\r\n            </ng-container>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n            <label class=\"col-sm-2 col-form-label\">Priority</label>\r\n            <ng-container class=\"col-sm-10\" *ngIf=\"priorityStrings as priorities\">\r\n                <select name=\"priority\" class=\"form-control\" [(ngModel)]=\"cardModel.priority\">\r\n                    <option value=\"\" hidden selected disabled>Choose Priority</option>\r\n                    <option *ngFor=\"let priority of priorities\" [ngValue]=\"priority.toString()\">\r\n                     {{priority.toString()}}\r\n                   </option>\r\n                </select>\r\n            </ng-container>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n            <label class=\"col-sm-2 col-form-label\">Due date</label>\r\n            <ng-container>\r\n            <div style=\"width: fit-content;\" class=\"col-sm-10 mt-1\">\r\n                <input\r\n                type=\"date\"\r\n                value=\"{{cardModel.dueDate}}\"\r\n                [min]=\"dateMin\"\r\n                ngModel=\"{{cardModel.dueDate}}\"\r\n                name=\"dueDate\"\r\n\t\t\t/>\r\n            </div></ng-container>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column;\" class=\"form-group\">\r\n            <label style=\"font-size: medium;\" class=\"col-sm-2 col-form-label\">Description</label>\r\n            <ng-container>\r\n                <textarea style=\"resize: vertical; min-height: 50px; max-height: 120px;\" placeholder=\"Write description for the card\" name=\"description\" [(ngModel)]=\"cardModel.description\" cols=\"50\" rows=\"3\">\r\n                </textarea>\r\n            </ng-container>\r\n        </div>\r\n    </form>\r\n    <footer id=\"modal-footer\">\r\n        <button mat-raised-button [disabled]=\"!createForm.dirty || cardModel.name==='' || cardModel.dueDate==='' || cardModel.priority==='' || cardModel.listCardsName===''|| cardModel.description===''\" form=\"createForm\" type=\"submit\" id=\"modal-close-button\" >Save</button>\r\n        <button mat-raised-button id=\"modal-save-button\" (click)=\"closeModal()\">Cancel</button>\r\n    </footer>\r\n</div> "
        },
        {
            "name": "CreateListCardsModalWindowComponent",
            "id": "component-CreateListCardsModalWindowComponent-3311421961ea84a448e91b9e8a68a0b0c74654606352360867181e245b6dbbe7bdeec82564b7d25465b801955f1f5035ffbeb1f9c58d66b01d30c1096f1aaf3d",
            "file": "src/app/_components/lists-cards/create-list-modal-window/create-list-modal-window.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-list-modal-window",
            "styleUrls": [
                "./create-list-modal-window.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./create-list-modal-window.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "createForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgForm | undefined",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'createForm'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<CreateListCardsModalWindowComponent>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "listCardsModel",
                    "defaultValue": "{name: '', boardId: 0}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CreateListCardsModel",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createListCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { UpdateCardModel } from 'src/app/_models/card/updateCardModel';\r\nimport { CardsService } from 'src/app/_services/cards.service';\r\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\r\nimport { ListsCardsService } from 'src/app/_services/lists-cards.service';\r\nimport { DatePipe } from '@angular/common';\r\nimport { NgForm } from '@angular/forms';\r\nimport { CreateListCardsModel } from 'src/app/_models/listCards/createListCardsModel';\r\n\r\n@Component({\r\n  selector: 'app-create-list-modal-window',\r\n  templateUrl: './create-list-modal-window.component.html',\r\n  styleUrls: ['./create-list-modal-window.component.css']\r\n})\r\nexport class CreateListCardsModalWindowComponent implements OnInit{\r\n  listCardsModel: CreateListCardsModel = {name: '', boardId: 0};\r\n  @ViewChild('createForm') createForm: NgForm | undefined;\r\n  errors: string[] = [];\r\n\r\n  constructor(\r\n    private listsCardsService: ListsCardsService,\r\n    public dialogRef: MatDialogRef<CreateListCardsModalWindowComponent>, \r\n    @Inject(MAT_DIALOG_DATA) public data: any){}\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.listCardsModel.boardId = Number(this.data.boardResponse);\r\n  }\r\n\r\n  createListCards(){\r\n      this.listsCardsService.createListCards(this.createForm?.value).subscribe(\r\n        next => {\r\n          this.closeModal();\r\n          window.location.reload();\r\n      },\r\n        err =>{\r\n          this.errors = [];\r\n          console.log(err.error);\r\n          try{\r\n            let validationErrorDictionary = JSON.parse(JSON.stringify(err.error.errors));\r\n            for (var fieldName in validationErrorDictionary) {\r\n              if (validationErrorDictionary.hasOwnProperty(fieldName)) {\r\n                this.errors.push(validationErrorDictionary[fieldName]);\r\n              }\r\n          }\r\n          }\r\n          catch{\r\n            let validationErrorDictionary = JSON.parse(JSON.stringify(err.error));\r\n            for (var fieldName in validationErrorDictionary) {\r\n              if (validationErrorDictionary.hasOwnProperty(fieldName)) {\r\n                this.errors.push(validationErrorDictionary[fieldName]);\r\n              }\r\n          }\r\n          }\r\n      })\r\n  }\r\n    \r\n  closeModal() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#modal-content-wrapper {\r\n    background-color: white;\r\n    opacity: 100%;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flexbox;\r\n}#modal-title {\r\n    font-size: 22px;\r\n}#modal-footer {\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 100%;\r\n    justify-content:center;\r\n    gap: 20px;\r\n    margin-top: 40px;\r\n    position: relative;\r\n}#modal-close-button {\r\n    background-color: #ce0909;\r\n}\r\n\r\n.row-container{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 20px;\r\n    justify-content:flex-start;\r\n    align-items: first baseline;\r\n  }\r\n\r\n  .form-control{\r\n    width: 40%;\r\n  }\r\n\r\n  button {\r\n    width: 150px;\r\n    padding: 0;\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  form {\r\n    position: relative;\r\n    margin: 0 auto;\r\n    padding: 1em;\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n  }\r\n\r\n  .no-border {\r\n    border: none;\r\n    display: inline;\r\n    font-family: inherit;\r\n    font-size: inherit;\r\n    padding: none;\r\n    width: 100%;\r\n    outline: none;\r\n  }\r\n\r\n  input:focus{\r\n    outline: none;\r\n  }\r\n\r\n  label{\r\n    width: 100px;\r\n  }",
                    "styleUrl": "./create-list-modal-window.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "listsCardsService",
                        "type": "ListsCardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CreateListCardsModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "listsCardsService",
                        "type": "ListsCardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<CreateListCardsModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"p-4\" id=\"modal-content-wrapper\">\r\n    <div class=\"alert alert-warning alert-dismissible fade show\" *ngIf=\"createForm.dirty\">\r\n        <strong>You made changes. Any unsaved changes will be lost</strong>\r\n    </div>\r\n    <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"errors.length > 0\">\r\n        <ul style=\"margin-bottom: 0px;\">\r\n          <li *ngFor=\"let error of errors\">\r\n            {{ error }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    <form (ngSubmit)=\"createListCards()\" id=\"createForm\" #createForm=\"ngForm\">\r\n        <h2><input name=\"name\" class=\"no-border\" value=\"New list\" [(ngModel)]=\"listCardsModel.name\" placeholder=\"Enter list's name\" (focus)=\"false\" type=\"text\" /></h2>\r\n        <input [hidden]=\"true\" type=\"text\" name=\"boardId\" [(ngModel)]=\"listCardsModel.boardId\">\r\n    </form>\r\n    <footer id=\"modal-footer\">\r\n        <button mat-raised-button [disabled]=\"!createForm.dirty || listCardsModel.name===''\" form=\"createForm\" type=\"submit\" id=\"modal-close-button\" >Save</button>\r\n        <button mat-raised-button id=\"modal-save-button\" (click)=\"closeModal()\">Cancel</button>\r\n    </footer>\r\n</div> "
        },
        {
            "name": "DeleteBoardModalWindowComponent",
            "id": "component-DeleteBoardModalWindowComponent-1c685ba5c1d5e4516526b92d1a2ab01e41c40a0cdfd7e63d706a71b6bbb63561a708cba8fc524c05e6090a2fdbd3e63c5c1444b8d51f4a66aa2c9954ed395b03",
            "file": "src/app/_components/boards/delete-board-modal-window/delete-board-modal-window.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delete-board-modal-window",
            "styleUrls": [
                "./delete-board-modal-window.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./delete-board-modal-window.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<DeleteBoardModalWindowComponent>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { BoardsService } from 'src/app/_services/boards.service';\r\nimport { CardsService } from 'src/app/_services/cards.service';\r\nimport { ListsCardsService } from 'src/app/_services/lists-cards.service';\r\n\r\n@Component({\r\n  selector: 'app-delete-board-modal-window',\r\n  templateUrl: './delete-board-modal-window.component.html',\r\n  styleUrls: ['./delete-board-modal-window.component.css']\r\n})\r\nexport class DeleteBoardModalWindowComponent {\r\n\r\n  constructor(public dialogRef: MatDialogRef<DeleteBoardModalWindowComponent>, \r\n    @Inject(MAT_DIALOG_DATA) public data: any, private boardsService: BoardsService){\r\n\r\n    }\r\n\r\n    deleteBoard(){\r\n      this.boardsService.deleteBoard(Number(this.data.boardResponse)).subscribe({\r\n        next: _ => {\r\n        this.closeModal();\r\n        window.location.reload();\r\n      }\r\n      })\r\n    }\r\n\r\n    closeModal() {\r\n      this.dialogRef.close();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#modal-content-wrapper {\r\n    background-color: white;\r\n    opacity: 100%;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flexbox;\r\n}#modal-title {\r\n    font-size: 22px;\r\n}#modal-footer {\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 100%;\r\n    justify-content:center;\r\n    gap: 20px;\r\n    margin-top: 10px;\r\n    position: relative;\r\n}#modal-close-button {\r\n    background-color: #ce0909;\r\n}",
                    "styleUrl": "./delete-board-modal-window.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DeleteBoardModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DeleteBoardModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"p-4\" id=\"modal-content-wrapper\">\r\n    <h2>Delete this board?</h2>\r\n    <footer id=\"modal-footer\">\r\n        <button mat-raised-button id=\"modal-close-button\" (click)=\"deleteBoard()\">Delete</button>\r\n        <button mat-raised-button id=\"modal-save-button\" (click)=\"closeModal()\">Cancel</button>\r\n    </footer>\r\n</div>"
        },
        {
            "name": "DeleteCardModalWindowComponent",
            "id": "component-DeleteCardModalWindowComponent-4145ca4cc25b2413a155b38bdafdd60cef36a9c39ca8586a4a7a49bfa2e3021f78f5a09ec665c76871d851a73d0e75d120b4917089ce06163d2cd0f6af096373",
            "file": "src/app/_components/cards/delete-card-modal-window/delete-card-modal-window.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delete-card-modal-window",
            "styleUrls": [
                "./delete-card-modal-window.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./delete-card-modal-window.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<DeleteCardModalWindowComponent>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { CardsService } from 'src/app/_services/cards.service';\r\n\r\n@Component({\r\n  selector: 'app-delete-card-modal-window',\r\n  templateUrl: './delete-card-modal-window.component.html',\r\n  styleUrls: ['./delete-card-modal-window.component.css']\r\n})\r\nexport class DeleteCardModalWindowComponent {\r\n\r\n  constructor(public dialogRef: MatDialogRef<DeleteCardModalWindowComponent>, \r\n    @Inject(MAT_DIALOG_DATA) public data: any, private cardsService: CardsService){\r\n\r\n    }\r\n\r\n    deleteCard(){\r\n      this.cardsService.deleteCard(Number(this.data.cardResponse)).subscribe({\r\n        next: _ => {\r\n        this.closeModal();\r\n        window.location.reload();\r\n      }\r\n      })\r\n    }\r\n\r\n    closeModal() {\r\n      this.dialogRef.close();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#modal-content-wrapper {\r\n    background-color: white;\r\n    opacity: 100%;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flexbox;\r\n}#modal-title {\r\n    font-size: 22px;\r\n}#modal-footer {\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 100%;\r\n    justify-content:center;\r\n    gap: 20px;\r\n    margin-top: 10px;\r\n    position: relative;\r\n}#modal-close-button {\r\n    background-color: #ce0909;\r\n}",
                    "styleUrl": "./delete-card-modal-window.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DeleteCardModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DeleteCardModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div style=\"width: 18rem;\" class=\"p-4\" id=\"modal-content-wrapper\">\r\n    <h2>Delete this card?</h2>\r\n    <footer id=\"modal-footer\">\r\n        <button mat-raised-button id=\"modal-close-button\" (click)=\"deleteCard()\">Delete</button>\r\n        <button mat-raised-button id=\"modal-save-button\" (click)=\"closeModal()\">Cancel</button>\r\n    </footer>\r\n</div>"
        },
        {
            "name": "DeleteListModalWindowComponent",
            "id": "component-DeleteListModalWindowComponent-daa0f205a83b98adae7f756b5862e9ca92ecd0e9a9944949c832ac595207eb14b9594c097b114c2e3a89292c8f579972b2c84f584e5c9f6817ac3964cb333fd4",
            "file": "src/app/_components/lists-cards/delete-list-modal-window/delete-list-modal-window.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delete-list-modal-window",
            "styleUrls": [
                "./delete-list-modal-window.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./delete-list-modal-window.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<DeleteListModalWindowComponent>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { CardsService } from 'src/app/_services/cards.service';\r\nimport { ListsCardsService } from 'src/app/_services/lists-cards.service';\r\n\r\n@Component({\r\n  selector: 'app-delete-list-modal-window',\r\n  templateUrl: './delete-list-modal-window.component.html',\r\n  styleUrls: ['./delete-list-modal-window.component.css']\r\n})\r\nexport class DeleteListModalWindowComponent {\r\n\r\n  constructor(public dialogRef: MatDialogRef<DeleteListModalWindowComponent>, \r\n    @Inject(MAT_DIALOG_DATA) public data: any, private listCardsService: ListsCardsService){\r\n\r\n    }\r\n\r\n    deleteCard(){\r\n      this.listCardsService.deleteListCards(Number(this.data.listResponse)).subscribe({\r\n        next: _ => {\r\n        this.closeModal();\r\n        window.location.reload();\r\n      }\r\n      })\r\n    }\r\n\r\n    closeModal() {\r\n      this.dialogRef.close();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#modal-content-wrapper {\r\n    background-color: white;\r\n    opacity: 100%;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flexbox;\r\n}#modal-title {\r\n    font-size: 22px;\r\n}#modal-footer {\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 100%;\r\n    justify-content:center;\r\n    gap: 20px;\r\n    margin-top: 10px;\r\n    position: relative;\r\n}#modal-close-button {\r\n    background-color: #ce0909;\r\n}",
                    "styleUrl": "./delete-list-modal-window.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DeleteListModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "listCardsService",
                        "type": "ListsCardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DeleteListModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "listCardsService",
                        "type": "ListsCardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"p-4\" id=\"modal-content-wrapper\">\r\n    <h2>Delete this list?</h2>\r\n    <footer id=\"modal-footer\">\r\n        <button mat-raised-button id=\"modal-close-button\" (click)=\"deleteCard()\">Delete</button>\r\n        <button mat-raised-button id=\"modal-save-button\" (click)=\"closeModal()\">Cancel</button>\r\n    </footer>\r\n</div>"
        },
        {
            "name": "EditBoardModalWindowComponent",
            "id": "component-EditBoardModalWindowComponent-402294c05f204252dabfb891a9663acaa24b5bd0e6225af27c5f52dcb78488ebf42469d0c9bce0751e317c6324ed0a0474301ac94f2813ceea680dcc5353ecfa",
            "file": "src/app/_components/boards/edit-board-modal-window/edit-board-modal-window.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-board-modal-window",
            "styleUrls": [
                "./edit-board-modal-window.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-board-modal-window.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "boardModel",
                    "defaultValue": "{id: 0, name:''}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UpdateBoardModel",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<EditBoardModalWindowComponent>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "editForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgForm | undefined",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'editForm'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateBoard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\r\nimport { NgForm } from '@angular/forms';\r\nimport { BoardsService } from 'src/app/_services/boards.service';\r\nimport { UpdateBoardModel } from 'src/app/_models/board/updateBoardModel';\r\n\r\n@Component({\r\n  selector: 'app-edit-board-modal-window',\r\n  templateUrl: './edit-board-modal-window.component.html',\r\n  styleUrls: ['./edit-board-modal-window.component.css']\r\n})\r\nexport class EditBoardModalWindowComponent implements OnInit{\r\n  boardModel: UpdateBoardModel = {id: 0, name:''};\r\n  @ViewChild('editForm') editForm: NgForm | undefined;\r\n  errors: string[] = [];\r\n\r\n  constructor(\r\n    private boardsService: BoardsService,\r\n    public dialogRef: MatDialogRef<EditBoardModalWindowComponent>, \r\n    @Inject(MAT_DIALOG_DATA) public data: any,private changeDetectorRef: ChangeDetectorRef){}\r\n\r\n  ngOnInit(): void {\r\n      this.loadBoard();\r\n  }\r\n\r\n  loadBoard(){\r\n    this.boardsService.getBoard(this.data.boardResponse).subscribe({\r\n      next: resp => this.boardModel = resp\r\n    })\r\n    this.changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  updateBoard(){\r\n    this.boardsService.updateBoard(this.editForm?.value).subscribe( next => {\r\n      this.closeModal();\r\n      window.location.reload();\r\n  },\r\n    err =>{\r\n      this.errors = [];\r\n      console.log(err.error);\r\n      try{\r\n        let validationErrorDictionary = JSON.parse(JSON.stringify(err.error.errors));\r\n        for (var fieldName in validationErrorDictionary) {\r\n          if (validationErrorDictionary.hasOwnProperty(fieldName)) {\r\n            this.errors.push(validationErrorDictionary[fieldName]);\r\n          }\r\n      }\r\n      }\r\n      catch{\r\n        let validationErrorDictionary = JSON.parse(JSON.stringify(err.error));\r\n        for (var fieldName in validationErrorDictionary) {\r\n          if (validationErrorDictionary.hasOwnProperty(fieldName)) {\r\n            this.errors.push(validationErrorDictionary[fieldName]);\r\n          }\r\n      }\r\n      }\r\n  })\r\n  }\r\n    \r\n  closeModal() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#modal-content-wrapper {\r\n    background-color: white;\r\n    opacity: 100%;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flexbox;\r\n}#modal-title {\r\n    font-size: 22px;\r\n}#modal-footer {\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 100%;\r\n    justify-content:center;\r\n    gap: 20px;\r\n    margin-top: 40px;\r\n    position: relative;\r\n}#modal-close-button {\r\n    background-color: #ce0909;\r\n}\r\n\r\n.row-container{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 20px;\r\n    justify-content:flex-start;\r\n    align-items: first baseline;\r\n  }\r\n\r\n  .form-control{\r\n    width: 40%;\r\n  }\r\n\r\n  button {\r\n    width: 150px;\r\n    padding: 0;\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  form {\r\n    position: relative;\r\n    margin: 0 auto;\r\n    padding: 1em;\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n  }\r\n\r\n  .no-border {\r\n    border: none;\r\n    display: inline;\r\n    font-family: inherit;\r\n    font-size: inherit;\r\n    padding: none;\r\n    width: 100%;\r\n    outline: none;\r\n  }\r\n\r\n  input:focus{\r\n    outline: none;\r\n  }\r\n\r\n  label{\r\n    width: 100px;\r\n  }",
                    "styleUrl": "./edit-board-modal-window.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditBoardModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "boardsService",
                        "type": "BoardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditBoardModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"p-4\" id=\"modal-content-wrapper\">\r\n    <div class=\"alert alert-warning alert-dismissible fade show\" *ngIf=\"editForm?.dirty\">\r\n        <strong>You made changes. Any unsaved changes will be lost</strong>\r\n    </div>\r\n    <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"errors.length > 0\">\r\n        <ul style=\"margin-bottom: 0px;\">\r\n          <li *ngFor=\"let error of errors\">\r\n            {{ error }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    <form *ngIf=\"boardModel\" (ngSubmit)=\"updateBoard()\" id=\"editForm\" #editForm=\"ngForm\">\r\n        <input [hidden]=\"true\" type=\"number\" name=\"id\" [(ngModel)]=\"boardModel.id\">\r\n        <h2><input name=\"name\" placeholder=\"Enter list's name\" placeholder=\"Enter board's name\" class=\"no-border\" [(ngModel)]=\"boardModel.name\" (focus)=\"false\" type=\"text\" [value]=\"boardModel.name\" /></h2>\r\n        <footer id=\"modal-footer\">\r\n            <button mat-raised-button [disabled]=\"!editForm?.dirty || boardModel.name===''\" form=\"editForm\" type=\"submit\" id=\"modal-close-button\">Save</button>\r\n            <button mat-raised-button id=\"modal-save-button\" (click)=\"closeModal()\">Cancel</button>\r\n        </footer>     \r\n    </form>\r\n\r\n</div>"
        },
        {
            "name": "EditCardModalWindowComponent",
            "id": "component-EditCardModalWindowComponent-9039554e9d7a6dc5cdab7d050a9097a3852c4874f8d60daca4ce11bdc8b21b67b567adf67e46192e98e1e3d610a1149c0d01717051efc457f85057f742ce4472",
            "file": "src/app/_components/cards/edit-card-modal-window/edit-card-modal-window.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-card-modal-window",
            "styleUrls": [
                "./edit-card-modal-window.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-card-modal-window.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardModel",
                    "defaultValue": "{id: 0, name: '', description: '', priority: '', listCardsName: '', dueDate: ''}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UpdateCardModel",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dateMin",
                    "defaultValue": "new Date().toISOString().slice(0, 10)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<EditCardModalWindowComponent>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "editForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgForm | undefined",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'editForm'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "listsCards$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ListCardsModel[]>",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "priorities",
                    "defaultValue": "Object.values(Priority)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "priorityStrings",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadLists",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { CardsService } from 'src/app/_services/cards.service';\r\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\r\nimport { CardModel } from 'src/app/_models/card/cardModel';\r\nimport { ListsCardsService } from 'src/app/_services/lists-cards.service';\r\nimport { ListCardsModel } from 'src/app/_models/listCards/listCardsModel';\r\nimport { Observable } from 'rxjs';\r\nimport {Priority} from 'src/app/_models/priority/priority';\r\nimport { DatePipe } from '@angular/common';\r\nimport { NgForm } from '@angular/forms';\r\nimport { UpdateCardModel } from 'src/app/_models/card/updateCardModel';\r\n\r\n@Component({\r\n  selector: 'app-edit-card-modal-window',\r\n  templateUrl: './edit-card-modal-window.component.html',\r\n  styleUrls: ['./edit-card-modal-window.component.css']\r\n})\r\nexport class EditCardModalWindowComponent implements OnInit{\r\n  cardModel: UpdateCardModel = {id: 0, name: '', description: '', priority: '', listCardsName: '', dueDate: ''}\r\n  listsCards$? : Observable<ListCardsModel[]>;\r\n  priorities = Object.values(Priority);\r\n  priorityStrings : string[]= [];\r\n  dateMin: string = new Date().toISOString().slice(0, 10);\r\n  @ViewChild('editForm') editForm: NgForm | undefined;\r\n  errors: string[] = [];\r\n\r\n  constructor(\r\n    private cardsService: CardsService, \r\n    private listsCardsService: ListsCardsService,\r\n    public dialogRef: MatDialogRef<EditCardModalWindowComponent>, \r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private changeDetectorRef: ChangeDetectorRef){}\r\n\r\n  ngOnInit(): void {\r\n    this.loadCard()\r\n    this.loadLists()\r\n    this.priorities.forEach(prioritiy => {this.priorityStrings.push(String(prioritiy))\r\n    });\r\n  }\r\n\r\n  loadCard(){\r\n    this.cardsService.getCard(Number(this.data.cardResponse)).subscribe({\r\n      next: resp => this.cardModel = resp\r\n    });\r\n    this.changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  updateCard(){\r\n    this.cardsService.updateCard(this.editForm?.value).subscribe(      \r\n      next => {\r\n        this.closeModal();\r\n        window.location.reload();\r\n    },\r\n      err =>{\r\n        this.errors = [];\r\n        let validationErrorDictionary = JSON.parse(JSON.stringify(err.error.errors));\r\n        for (var fieldName in validationErrorDictionary) {\r\n          if (validationErrorDictionary.hasOwnProperty(fieldName)) {\r\n            this.errors.push(validationErrorDictionary[fieldName]);\r\n          }\r\n      }}\r\n  )\r\n  }\r\n\r\n  loadLists(){\r\n    this.listsCards$=this.listsCardsService.getListsCardsByBoardId(this.data.boardResponse);\r\n  }\r\n    \r\n  closeModal() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#modal-content-wrapper {\r\n    background-color: white;\r\n    opacity: 100%;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flexbox;\r\n}#modal-title {\r\n    font-size: 22px;\r\n}#modal-footer {\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 100%;\r\n    justify-content:center;\r\n    gap: 20px;\r\n    margin-top: 40px;\r\n    position: relative;\r\n}#modal-close-button {\r\n    background-color: #ce0909;\r\n}\r\n\r\n.row-container{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 20px;\r\n    justify-content:flex-start;\r\n    align-items: first baseline;\r\n  }\r\n\r\n  .form-control{\r\n    width: 40%;\r\n  }\r\n\r\n  button {\r\n    width: 150px;\r\n    padding: 0;\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  form {\r\n    position: relative;\r\n    margin: 0 auto;\r\n    padding: 1em;\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n  }\r\n\r\n  .no-border {\r\n    border: none;\r\n    display: inline;\r\n    font-family: inherit;\r\n    font-size: inherit;\r\n    padding: none;\r\n    width: 100%;\r\n    outline: none;\r\n  }\r\n\r\n  input:focus{\r\n    outline: none;\r\n  }\r\n\r\n  label{\r\n    width: 100px;\r\n  }",
                    "styleUrl": "./edit-card-modal-window.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "listsCardsService",
                        "type": "ListsCardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditCardModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "listsCardsService",
                        "type": "ListsCardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditCardModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"p-4\" id=\"modal-content-wrapper\">\r\n    <div class=\"alert alert-warning alert-dismissible fade show\" *ngIf=\"editForm?.dirty\">\r\n        <strong>You made changes. Any unsaved changes will be lost</strong>\r\n    </div>\r\n    <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"errors.length > 0\">\r\n        <ul style=\"margin-bottom: 0px;\">\r\n          <li *ngFor=\"let error of errors\">\r\n            {{ error }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    <form *ngIf=\"cardModel\" (ngSubmit)=\"updateCard()\" id=\"editForm\" #editForm=\"ngForm\">\r\n        <input [hidden]=\"true\" type=\"number\" name=\"id\" [(ngModel)]=\"cardModel.id\">\r\n        <h2><input name=\"name\" class=\"no-border\" [(ngModel)]=\"cardModel.name\" (focus)=\"false\" type=\"text\" [value]=\"cardModel.name\" /></h2>\r\n        <div class=\"form-group row\">\r\n            <label class=\"col-sm-2 col-form-label\">List</label>\r\n            <ng-container class=\"col-sm-10\" *ngIf=\"listsCards$ | async as listsCards\">\r\n                <select name=\"listCardsName\" class=\"form-control\" [(ngModel)]=\"cardModel.listCardsName\">\r\n                    <option *ngFor=\"let listCards of listsCards\" [ngValue]=\"listCards.name\">\r\n                    {{listCards.name}}\r\n                    </option>\r\n                </select>\r\n            </ng-container>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n            <label class=\"col-sm-2 col-form-label\">Priority</label>\r\n            <ng-container class=\"col-sm-10\" *ngIf=\"priorityStrings as priorities\">\r\n                <select name=\"priority\" class=\"form-control\" [(ngModel)]=\"cardModel.priority\">\r\n                    <option *ngFor=\"let priority of priorities\" [ngValue]=\"priority.toString()\">\r\n                     {{priority.toString()}}\r\n                   </option>\r\n                </select>\r\n            </ng-container>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n            <label class=\"col-sm-2 col-form-label\">Due date</label>\r\n            <ng-container>\r\n            <div style=\"width: fit-content;\" class=\"col-sm-10 mt-1\">\r\n                <input\r\n                type=\"date\"\r\n                value=\"{{cardModel.dueDate.substring(0,10)}}\"\r\n                name=\"dueDate\"\r\n                ngModel=\"{{cardModel.dueDate.substring(0,10)}}\"\r\n                min=\"{{dateMin}}\"\r\n\t\t\t/>\r\n            </div></ng-container>\r\n        </div>\r\n        <div style=\"display: flex; flex-direction: column;\" class=\"form-group\">\r\n            <label style=\"font-size: medium;\" class=\"col-sm-2 col-form-label\">Description</label>\r\n            <ng-container>\r\n                <textarea style=\"resize: vertical; min-height: 50px; max-height: 120px;\" placeholder=\"Write description for the card\" name=\"description\" [value]=\"cardModel.description\" [(ngModel)]=\"cardModel.description\" id=\"\" cols=\"50\" rows=\"3\">\r\n                </textarea>\r\n            </ng-container>\r\n        </div>    \r\n        <footer id=\"modal-footer\">\r\n            <button mat-raised-button [disabled]=\"!editForm?.dirty || cardModel.name==='' || cardModel.dueDate==='' || cardModel.priority==='' || cardModel.listCardsName===''|| cardModel.description===''\" form=\"editForm\" type=\"submit\" id=\"modal-close-button\">Save</button>\r\n            <button mat-raised-button id=\"modal-save-button\" (click)=\"closeModal()\">Cancel</button>\r\n        </footer>\r\n    </form>\r\n</div>"
        },
        {
            "name": "EditListModalWindowComponent",
            "id": "component-EditListModalWindowComponent-d655b6fa99e3632db90ed4dc412443665c933852625619005281a390a2dbd2ba3ec61dbd8715f322abb1067083a86b3889d498175a670fe3e176f2452ffc5fbc",
            "file": "src/app/_components/lists-cards/edit-list-modal-window/edit-list-modal-window.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-list-modal-window",
            "styleUrls": [
                "./edit-list-modal-window.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-list-modal-window.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<EditListModalWindowComponent>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "editForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgForm | undefined",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'editForm'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "listCardsModel",
                    "defaultValue": "{id: 0, name:''}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UpdateListCardsModel",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadListCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateListCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { CardsService } from 'src/app/_services/cards.service';\r\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\r\nimport { ListsCardsService } from 'src/app/_services/lists-cards.service';\r\nimport { ListCardsModel } from 'src/app/_models/listCards/listCardsModel';\r\nimport { Observable } from 'rxjs';\r\nimport { NgForm } from '@angular/forms';\r\nimport { UpdateListCardsModel } from 'src/app/_models/listCards/updateListCardsModel';\r\n\r\n@Component({\r\n  selector: 'app-edit-list-modal-window',\r\n  templateUrl: './edit-list-modal-window.component.html',\r\n  styleUrls: ['./edit-list-modal-window.component.css']\r\n})\r\nexport class EditListModalWindowComponent implements OnInit{\r\n  listCardsModel: UpdateListCardsModel = {id: 0, name:''};\r\n  @ViewChild('editForm') editForm: NgForm | undefined;\r\n  errors: string[] = [];\r\n\r\n  constructor(\r\n    private listsCardsService: ListsCardsService,\r\n    public dialogRef: MatDialogRef<EditListModalWindowComponent>, \r\n    @Inject(MAT_DIALOG_DATA) public data: any,private changeDetectorRef: ChangeDetectorRef){}\r\n\r\n  ngOnInit(): void {\r\n      this.loadListCards();\r\n  }\r\n\r\n  loadListCards(){\r\n    this.listsCardsService.getListCards(Number(this.data.listResponse)).subscribe({\r\n      next: resp => this.listCardsModel = resp\r\n    })\r\n    this.changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  updateListCards(){\r\n    this.listsCardsService.updateListCards(this.editForm?.value).subscribe( next => {\r\n      this.closeModal();\r\n      window.location.reload();\r\n  },\r\n    err =>{\r\n      this.errors = [];\r\n      console.log(err.error);\r\n      try{\r\n        let validationErrorDictionary = JSON.parse(JSON.stringify(err.error.errors));\r\n        for (var fieldName in validationErrorDictionary) {\r\n          if (validationErrorDictionary.hasOwnProperty(fieldName)) {\r\n            this.errors.push(validationErrorDictionary[fieldName]);\r\n          }\r\n      }\r\n      }\r\n      catch{\r\n        let validationErrorDictionary = JSON.parse(JSON.stringify(err.error));\r\n        for (var fieldName in validationErrorDictionary) {\r\n          if (validationErrorDictionary.hasOwnProperty(fieldName)) {\r\n            this.errors.push(validationErrorDictionary[fieldName]);\r\n          }\r\n      }\r\n      }\r\n  })\r\n  }\r\n    \r\n  closeModal() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#modal-content-wrapper {\r\n    background-color: white;\r\n    opacity: 100%;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flexbox;\r\n}#modal-title {\r\n    font-size: 22px;\r\n}#modal-footer {\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 100%;\r\n    justify-content:center;\r\n    gap: 20px;\r\n    margin-top: 40px;\r\n    position: relative;\r\n}#modal-close-button {\r\n    background-color: #ce0909;\r\n}\r\n\r\n.row-container{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 20px;\r\n    justify-content:flex-start;\r\n    align-items: first baseline;\r\n  }\r\n\r\n  .form-control{\r\n    width: 40%;\r\n  }\r\n\r\n  button {\r\n    width: 150px;\r\n    padding: 0;\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  form {\r\n    position: relative;\r\n    margin: 0 auto;\r\n    padding: 1em;\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n  }\r\n\r\n  .no-border {\r\n    border: none;\r\n    display: inline;\r\n    font-family: inherit;\r\n    font-size: inherit;\r\n    padding: none;\r\n    width: 100%;\r\n    outline: none;\r\n  }\r\n\r\n  input:focus{\r\n    outline: none;\r\n  }\r\n\r\n  label{\r\n    width: 100px;\r\n  }",
                    "styleUrl": "./edit-list-modal-window.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "listsCardsService",
                        "type": "ListsCardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditListModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "listsCardsService",
                        "type": "ListsCardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditListModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"p-4\" id=\"modal-content-wrapper\">\r\n    <div class=\"alert alert-warning alert-dismissible fade show\" *ngIf=\"editForm?.dirty\">\r\n        <strong>You made changes. Any unsaved changes will be lost</strong>\r\n    </div>\r\n    <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"errors.length > 0\">\r\n        <ul style=\"margin-bottom: 0px;\">\r\n          <li *ngFor=\"let error of errors\">\r\n            {{ error }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    <form *ngIf=\"listCardsModel\" (ngSubmit)=\"updateListCards()\" id=\"editForm\" #editForm=\"ngForm\">\r\n        <input [hidden]=\"true\" type=\"number\" name=\"id\" [(ngModel)]=\"listCardsModel.id\">\r\n        <h2><input name=\"name\" placeholder=\"Enter list's name\" placeholder=\"Enter board's name\" class=\"no-border\" [(ngModel)]=\"listCardsModel.name\" (focus)=\"false\" type=\"text\" [value]=\"listCardsModel.name\" /></h2>\r\n        <footer id=\"modal-footer\">\r\n            <button mat-raised-button [disabled]=\"!editForm?.dirty || listCardsModel.name===''\" form=\"editForm\" type=\"submit\" id=\"modal-close-button\">Save</button>\r\n            <button mat-raised-button id=\"modal-save-button\" (click)=\"closeModal()\">Cancel</button>\r\n        </footer>     \r\n    </form>\r\n\r\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-cad94b233ec8e80ceb541e7972c5f9737e08237b4e137112f3987ca48ee0cce5c0d57798d41daa5d4d24d6bdbb2df1606ab68cca2aa0a1785e38f99f3cac0729",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-3c13bfc2a490169411913f31b65251f01cdfffc17c0356baa57e0d971eeeadc5645bc851f304794f36a8f89f6599054d0cabeeea9b33cce2defbdc99952b040b",
            "file": "src/app/_components/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardsWithoutParent$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<CardModel[]>",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "dialogConfig",
                    "defaultValue": "new MatDialogConfig()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "listsCards$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ListCardsModel[]>",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "modalDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<CreateListCardsModalWindowComponent | any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ListsCardsService } from '../../_services/lists-cards.service';\r\nimport { ListCardsModel } from '../../_models/listCards/listCardsModel';\r\nimport { CardModel } from '../../_models/card/cardModel';\r\nimport { CardsService } from '../../_services/cards.service';\r\nimport { Observable } from 'rxjs';\r\nimport { MatDialog, MatDialogConfig, MatDialogRef } from '@angular/material/dialog';\r\nimport { CreateListCardsModalWindowComponent } from '../lists-cards/create-list-modal-window/create-list-modal-window.component';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit{\r\n  cardsWithoutParent$? : Observable<CardModel[]>\r\n  listsCards$? : Observable<ListCardsModel[]>\r\n  dialogConfig = new MatDialogConfig();\r\n  modalDialog: MatDialogRef<CreateListCardsModalWindowComponent, any> | undefined;\r\n\r\n  constructor(){}\r\n\r\n  ngOnInit(): void {\r\n  }\r\n    \r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n  .dots {\r\n\t  border: 2.22px;\r\n    border-style: dashed;\r\n    border-color: gray;\r\n    background-color: white;\r\n    width: 15rem;\r\n    margin-bottom: 20px;\r\n    margin-left: 0px;\r\n    padding: 5px;\r\n    font-size: large;\r\n  }\r\n\r\n.dots:hover{\r\n  background-color: rgba(0,0,0,0.05);\r\n}\r\n\r\n.column-container{\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\n\r\n.col{\r\n  width: 25%;\r\n  align-items: self-start;\r\n  display: inline;\r\n}\r\n\r\n.lCards{\r\n  display: grid; \r\n  gap:50px;\r\n  justify-content: space-between;\r\n  grid-template-columns: repeat(4, 23%);\r\n  width: 100%;\r\n}\r\n\r\n@media screen and (max-width: 1300px) {\r\n  .lCards {\r\n    display: grid; \r\n    justify-content: space-between;\r\n    column-gap: 50px;\r\n    grid-template-columns: repeat(3, 30%);\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 880px) {\r\n  .lCards {\r\n    display: grid; \r\n    justify-content: space-between;\r\n    column-gap: 50px;\r\n    grid-template-columns: repeat(2, 48%);\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 580px) {\r\n  .lCards {\r\n    display: flex; \r\n    flex-direction: column;\r\n    justify-content: center;\r\n    grid-template-columns: repeat(1, 100%);\r\n  }\r\n  .column-container{\r\n    padding-left: 70px;\r\n  }\r\n}",
                    "styleUrl": "./home.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"column-container\">\r\n\r\n</div>"
        },
        {
            "name": "ListCardsComponent",
            "id": "component-ListCardsComponent-e349f33df6ebc447ff11c15ff10cb20e187d135f172391fe959e932d04f9f0d611762ec7ee290de7ba105728ddbfd0a3ab2d2393797e1600065c8188b5a3ef2d",
            "file": "src/app/_components/lists-cards/list-cards/list-cards.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-cards",
            "styleUrls": [
                "./list-cards.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./list-cards.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "listCards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "ListCardsModel | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogConfig",
                    "defaultValue": "new MatDialogConfig()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "matDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "modalDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<CreateCardModalWindowComponent | any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "openCreateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { MatDialog, MatDialogConfig, MatDialogRef } from '@angular/material/dialog';\r\nimport { ListCardsModel } from 'src/app/_models/listCards/listCardsModel';\r\nimport { CreateCardModalWindowComponent } from 'src/app/_components/cards/create-card-modal-window/create-card-modal-window.component';\r\n\r\n@Component({\r\n  selector: 'app-list-cards',\r\n  templateUrl: './list-cards.component.html',\r\n  styleUrls: ['./list-cards.component.css']\r\n})\r\nexport class ListCardsComponent {\r\n  @Input() listCards: ListCardsModel | undefined;\r\n  dialogConfig = new MatDialogConfig();\r\n  modalDialog: MatDialogRef<CreateCardModalWindowComponent, any> | undefined;\r\n\r\n  constructor(public matDialog: MatDialog){}\r\n\r\n  openCreateForm(){\r\n    this.dialogConfig.id = \"projects-modal-component\";\r\n    this.modalDialog = this.matDialog.open(CreateCardModalWindowComponent, {\r\n      // width: '500px',\r\n      // height: '550px',\r\n      data: {\r\n        cardResponse: this.listCards?.name,\r\n        boardResponse: this.listCards?.boardId\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dots {\r\n\t  border: 2.22px;\r\n    border-style: dashed;\r\n    border-color: gray;\r\n    background-color: white;\r\n    width: 15rem;\r\n    margin-bottom: 10px;\r\n    padding: 5px;\r\n    font-size: large;\r\n  }\r\n\r\n.col{\r\n  width: 20%;\r\n  align-items: self-start;\r\n  display: inline;\r\n  gap: 10px;\r\n}\r\n\r\n.dots:hover{\r\n  background-color: rgba(0,0,0,0.05);\r\n}\r\n    \r\n.bi:hover, bi:focus{\r\n  fill: darkslategrey\r\n}\r\n\r\nsvg{\r\n  margin-bottom: 3px;\r\n  margin-left: 15px;\r\n}\r\n\r\n.row-container{\r\n  display: flex;\r\n  width:min-content;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: first baseline;\r\n  margin-right: 15px;\r\n  border-top: 2px;\r\n  border-bottom: 2px;\r\n  border-color: rgba(0,0,0,0.1);;\r\n  border-top-style:solid;\r\n  border-bottom-style:solid;\r\n  padding-left: 8px;\r\n  padding-right: 5px;\r\n  border-radius: 0%;\r\n  margin-bottom: 10px;\r\n  vertical-align: middle;\r\n}\r\n\r\nh2{\r\n  margin-bottom: 5px;\r\n  width: 185px;\r\n}\r\n\r\nh3{\r\n  margin-top: 0px;\r\n  margin-bottom: 5px;\r\n}\r\n",
                    "styleUrl": "./list-cards.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"col\">\r\n    <div class=\"row-container\">\r\n        <h2>{{listCards?.name}}</h2>\r\n        <h3>{{listCards?.cards?.length}}</h3>\r\n        <a #openMenu href=\"{{listCards?.id}}\">\r\n            <svg  aria-haspopup=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"24\" fill=\"black\" id=\"openMenu\" class=\"bi bi-three-dots-vertical\" viewBox=\"0 0 16 16\">\r\n              <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0\"/>\r\n            </svg>\r\n        </a>\r\n        <app-list-context-menu [id]=\"listCards?.id\" [target]=\"openMenu\"></app-list-context-menu>\r\n    </div>\r\n    <button (click)=\"openCreateForm()\" class=\"dots\" data-initialized=\"true\">\r\n        Add\r\n    </button>\r\n    <div class=\"col mb-4\" style=\"align-items: self-start\" *ngFor=\"let card of listCards?.cards\">\r\n        <app-card [boardId]=\"listCards?.boardId\" [card]=\"card\"></app-card>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ListContextMenuComponent",
            "id": "component-ListContextMenuComponent-c2d5bf6858121750b60714224190f502ff94539355065bbbd3464a1054b63ae7dc20c937dffdde6920494de931fae63ce7763015f5a4eead4c837a43778ae86b",
            "file": "src/app/_components/lists-cards/list-context-menu/list-context-menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-context-menu",
            "styleUrls": [
                "./list-context-menu.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./list-context-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogConfig",
                    "defaultValue": "new MatDialogConfig()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "items",
                    "defaultValue": "[\r\n    {\r\n    label: 'Edit',\r\n    command: () => this.openEditForm()\r\n  },\r\n  {\r\n    label: 'Delete',\r\n    command: () => this.openDeletePopup()\r\n  }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "matDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "modalDialogDelete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<DeleteListModalWindowComponent | any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "modalDialogEdit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<EditListModalWindowComponent | any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "openDeletePopup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEditForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Inject, Input, ViewChild } from '@angular/core';\r\nimport { MatDialog, MatDialogConfig, MatDialogRef } from '@angular/material/dialog';\r\nimport { MenuItem } from 'primeng/api';\r\nimport { ListsCardsService } from 'src/app/_services/lists-cards.service';\r\nimport { EditListModalWindowComponent } from '../edit-list-modal-window/edit-list-modal-window.component';\r\nimport { DeleteListModalWindowComponent } from '../delete-list-modal-window/delete-list-modal-window.component';\r\n\r\n@Component({\r\n  selector: 'app-list-context-menu',\r\n  templateUrl: './list-context-menu.component.html',\r\n  styleUrls: ['./list-context-menu.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class ListContextMenuComponent {\r\n  @Input() target: any;\r\n  @Input() id: any;\r\n  dialogConfig = new MatDialogConfig();\r\n  modalDialogEdit: MatDialogRef<EditListModalWindowComponent, any> | undefined;\r\n  modalDialogDelete: MatDialogRef<DeleteListModalWindowComponent, any> | undefined;\r\n\r\n  constructor(private listsCards: ListsCardsService, public matDialog: MatDialog){\r\n\r\n  }\r\n\r\n  items: MenuItem[] = [\r\n    {\r\n    label: 'Edit',\r\n    command: () => this.openEditForm()\r\n  },\r\n  {\r\n    label: 'Delete',\r\n    command: () => this.openDeletePopup()\r\n  }\r\n  ]\r\n\r\n  openEditForm(){\r\n    this.dialogConfig.id = \"projects-modal-component\";\r\n    this.modalDialogEdit = this.matDialog.open(EditListModalWindowComponent, {\r\n      width: '500px',\r\n      // height: '550px',\r\n      data: {\r\n        listResponse: this.id\r\n      }\r\n    });\r\n  }\r\n\r\n  openDeletePopup(){\r\n    this.dialogConfig.id = \"projects-modal-component\";\r\n    this.modalDialogDelete = this.matDialog.open(DeleteListModalWindowComponent, {\r\n      // width: '500px',\r\n      // height: '550px',\r\n      data: {\r\n        listResponse: this.id\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./list-context-menu.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "listsCards",
                        "type": "ListsCardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "listsCards",
                        "type": "ListsCardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<p-contextMenu\r\n    [model]=\"items\"\r\n    [target] = \"target\"\r\n    [appendTo]= \"'body'\"\r\n    triggerEvent=\"click\"\r\n    [id] = \"id\">\r\n</p-contextMenu>\r\n"
        },
        {
            "name": "NavComponent",
            "id": "component-NavComponent-11883320b782ab7bd9e89fe82f1a9d9800a467e477b2ad7b0ebe762eed7f0261ec674d28180c790eaafb9b9095e8332f9606ef65b388e89fd3bbea67aea907f5",
            "file": "src/app/_components/nav/nav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav",
            "styleUrls": [
                "./nav.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./nav.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "boardId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "closeBoardPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { BoardsService } from 'src/app/_services/boards.service';\r\nimport { closeBoard } from 'src/app/store/boards/board.actions';\r\n\r\n@Component({\r\n  selector: 'app-nav',\r\n  templateUrl: './nav.component.html',\r\n  styleUrls: ['./nav.component.css']\r\n})\r\nexport class NavComponent implements OnInit{\r\n  boardId: number = 0\r\n\r\n  constructor( private store: Store<{id:{id: number}}>){}\r\n\r\n  ngOnInit(): void {\r\n    this.store.select('id').subscribe(data=> this.boardId = data.id)\r\n  }\r\n\r\n  closeBoardPage(){\r\n    this.store.dispatch(closeBoard())\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sdbar{\r\n    width: 100%;\r\n    overflow-x: hidden;\r\n    min-width: 300px;\r\n}\r\n\r\n@media screen and (max-width: 580px) {\r\n    .navbar-brand{\r\n      padding-left: 70px;\r\n    }\r\n  }",
                    "styleUrl": "./nav.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav class=\"navbar navbar-dark bg-dark\" aria-label=\"First navbar example\">\r\n  <div  class=\"container\">\r\n    <div style=\"display: flex; flex-direction: row; gap: 50px;\">\r\n    <a style=\"padding-bottom: 0px; padding-top: 7px;\" class=\"navbar-brand\" href=\"#\">Task Board</a>\r\n  <ul style=\"display: flex; flex-direction: row; gap: 50px;\" class=\"navbar-nav\" >\r\n      <li class=\"nav-item\">\r\n          <a style=\"font-size: medium;\" (click)=\"closeBoardPage()\" class=\"nav-link\" routerLink=\"/boards\" routerLinkActive=\"active\">Boards</a>\r\n      </li>\r\n  </ul>\r\n</div>\r\n  <button *ngIf=\"boardId>0\" class=\"btn float-end\" data-bs-toggle=\"offcanvas\" data-bs-target=\"#offcanvas\" role=\"button\">\r\n    <span class=\"navbar-toggler-icon\"></span>\r\n</button>\r\n  <div *ngIf=\"boardId>0\" id=\"offcanvas\" class=\"sdbar offcanvas offcanvas-end w-25\" >\r\n      <app-actions-sidebar></app-actions-sidebar>\r\n    </div>\r\n  </div>\r\n</nav>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-d32b0f19628254ea3fc5526c4d4564ada1cc83cf936759006d90a46f5874b02a3359e331bddda20b22e74a616a6443c660602ba74dd38ebe1160759e0de6f7ba",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ViewCardModalWindowComponent",
            "id": "component-ViewCardModalWindowComponent-6b28c342cb75783560c8b3505bc2baceaefe572788740c3114755a709b61f4b37103f0fbba46bca2461beaed75c152f1643a53f86bbdd69115180a5f601cc0d0",
            "file": "src/app/_components/cards/view-card-modal-window/view-card-modal-window.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-view-card-modal-window",
            "styleUrls": [
                "./view-card-modal-window.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./view-card-modal-window.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actionsObs$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ActionModel[]>",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "card",
                    "defaultValue": "{id:0, name:'', description:'', boardId:0, listCardsName:'', priority:'', dueDate:'', actions:[]}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardModel",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dateMin",
                    "defaultValue": "new Date().toISOString().slice(0, 10)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "dialogConfig",
                    "defaultValue": "new MatDialogConfig()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ViewCardModalWindowComponent>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "editForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgForm | undefined",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'editForm'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "listsCards$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ListCardsModel[]>",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "matDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "modalDialogEdit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<EditCardModalWindowComponent | any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "priorities",
                    "defaultValue": "Object.values(Priority)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "priorityStrings",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "convertToLocalDate",
                    "args": [
                        {
                            "name": "responseDate",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "responseDate",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToLocalDate2",
                    "args": [
                        {
                            "name": "responseDate",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "responseDate",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadActions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadLists",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEditForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "stringToDate",
                    "args": [
                        {
                            "name": "dateString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DatePipe",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dateString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialog, MatDialogConfig, MatDialogRef } from '@angular/material/dialog';\r\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\r\nimport { CardModel } from 'src/app/_models/card/cardModel';\r\nimport { ListsCardsService } from 'src/app/_services/lists-cards.service';\r\nimport { ListCardsModel } from 'src/app/_models/listCards/listCardsModel';\r\nimport { Observable, map } from 'rxjs';\r\nimport {Priority} from 'src/app/_models/priority/priority';\r\nimport { DatePipe } from '@angular/common';\r\nimport { NgForm } from '@angular/forms';\r\nimport { EditCardModalWindowComponent } from '../edit-card-modal-window/edit-card-modal-window.component';\r\nimport { ActionsService } from 'src/app/_services/actions.service';\r\nimport { ActionModel } from 'src/app/_models/action/actionModel';\r\nimport { Store } from '@ngrx/store';\r\n\r\n@Component({\r\n  selector: 'app-view-card-modal-window',\r\n  templateUrl: './view-card-modal-window.component.html',\r\n  styleUrls: ['./view-card-modal-window.component.css']\r\n})\r\nexport class ViewCardModalWindowComponent implements OnInit{\r\n  card: CardModel = {id:0, name:'', description:'', boardId:0, listCardsName:'', priority:'', dueDate:'', actions:[]}\r\n  listsCards$? : Observable<ListCardsModel[]>\r\n  actionsObs$?: Observable<ActionModel[]>\r\n  priorities = Object.values(Priority);\r\n  priorityStrings : string[]= []\r\n  dateMin: string = new Date().toISOString().slice(0, 10);\r\n  @ViewChild('editForm') editForm: NgForm | undefined\r\n\r\n  constructor(\r\n    private listsCardsService: ListsCardsService,\r\n    private actionsService: ActionsService,\r\n    public dialogRef: MatDialogRef<ViewCardModalWindowComponent>, \r\n    @Inject(MAT_DIALOG_DATA) public data: any, public matDialog: MatDialog, private store: Store<{card:{card:CardModel}}>){}\r\n\r\n    dialogConfig = new MatDialogConfig();\r\n    modalDialogEdit: MatDialogRef<EditCardModalWindowComponent, any> | undefined;\r\n    \r\n\r\n  ngOnInit(): void {\r\n    this.loadCard()\r\n    this.loadLists()\r\n    this.loadActions()\r\n    this.priorities.forEach(prioritiy => {this.priorityStrings.push(String(prioritiy))\r\n    });\r\n  }\r\n\r\n  loadCard(){\r\n    this.store.select('card').subscribe(data=> this.card = data.card);\r\n  }\r\n\r\n  loadActions(){\r\n     this.actionsObs$ = this.actionsService.getActionsByCardId(Number(this.data.cardResponse))\r\n    }\r\n\r\n  stringToDate(dateString: string): DatePipe {\r\n    return new DatePipe(dateString);\r\n  }\r\n\r\n  loadLists(){\r\n    this.listsCards$=this.listsCardsService.getListsCards();\r\n  }\r\n    \r\n  closeModal() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  convertToLocalDate(responseDate: any) {\r\n    try {\r\n        if (responseDate != null) {\r\n            var dt = new Date(responseDate);\r\n            dt.setHours(dt.getHours()+5);\r\n            return String(dt.toUTCString().split(' ').slice(0,3).join(' '));\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (error) {\r\n        return responseDate;\r\n    }\r\n}\r\n\r\nconvertToLocalDate2(responseDate: any) {\r\n  try {\r\n      if (responseDate != null) {\r\n          var dt = new Date(responseDate)\r\n          return String('on ' + dt.toUTCString().split(' ').slice(0,3).join(' ') + ' at ' + dt.toTimeString().split(' ')[0].split(':').slice(0,2).join(':'));\r\n      } else {\r\n          return null;\r\n      }\r\n  } catch (error) {\r\n      return responseDate;\r\n  }\r\n}\r\n\r\nopenEditForm(){\r\n  this.dialogConfig.id = \"projects-modal-component\";\r\n  this.closeModal();\r\n  this.modalDialogEdit = this.matDialog.open(EditCardModalWindowComponent, {\r\n    // width: '500px',\r\n    // height: '550px',\r\n    data: {\r\n      cardResponse: Number(this.data.cardResponse),\r\n      boardResponse: this.data.boardResponse\r\n    }\r\n  });\r\n}\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#modal-content-wrapper {\r\n    background-color: white;\r\n    opacity: 100%;\r\n    width: 100%;\r\n    height: 90%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 10px;\r\n}.modal-title {\r\n    font-size: 22px;\r\n    margin-bottom: 0px;\r\n}\r\n\r\n.wrapper {\r\n  display: grid;\r\n  grid-template-columns:2fr 3fr;\r\n  column-gap: 80px;\r\n  row-gap: 20px;\r\n  padding-top: 0.5rem;\r\n  width: max-content;\r\n}\r\n\r\n.box {\r\n  padding-bottom: 0.5rem;\r\n  width: fit-content;\r\n}\r\n\r\n.b,\r\n.d,\r\n.h,\r\n.f{\r\n  width:max-content;\r\n} \r\n\r\n.row-container{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 20px;\r\n    justify-content:flex-start;\r\n    align-items: first baseline;\r\n  }\r\n\r\n  button {\r\n    width: 150px;\r\n    padding: 0;\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  .no-border {\r\n    border: none;\r\n    display: inline;\r\n    font-family: inherit;\r\n    font-size: inherit;\r\n    padding: none;\r\n    width: 100%;\r\n    outline: none;\r\n  }\r\n\r\n  .row-prop{\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    padding-top: 10px;\r\n    width: max-content;\r\n    gap: 10px;\r\n  }\r\n\r\n  .gr-txt{\r\n    color: gray;\r\n    font-size: 18px;\r\n    padding-bottom: 0px;\r\n    width: fit-content;\r\n    margin-bottom: 0px;\r\n  }\r\n\r\n  .h6dd{\r\n    font-size: medium;\r\n    margin-top: 5px;\r\n    padding: 5px;\r\n    background-color: rgba(169, 169, 169, 0.1);\r\n    border-radius: 10%;\r\n  }\r\n\r\n  .card-priority{\r\n    font-size: medium;\r\n    padding: 5px;\r\n    width: max-content;\r\n    color:rgba(0, 0, 0, 0.4);\r\n    background-color:aliceblue;\r\n    border-radius: 20%;\r\n    margin-top: 5px;\r\n  }\r\n\r\n  .card-info{\r\n    display: flex;\r\n    flex-direction: column;\r\n    row-gap: 20px;\r\n  }\r\n\r\n  .card-descr{\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .gr-decsr{\r\n    color: gray;\r\n    font-size: 16px;\r\n  }\r\n\r\n  .m-header{\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .but-edit{\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 10px;\r\n    padding: 5px;\r\n    border-radius: 10%;\r\n    height: fit-content;\r\n    cursor: pointer;\r\n    background-color: rgba(128, 128, 128, 0.1);\r\n  }\r\n\r\n  .but-edit:hover{\r\n    background-color: rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  .scrollSidebar{\r\n    /* max-height: calc(100vh - 3.5rem); */\r\n    overflow-y: auto;\r\n    background-color: rgba(128, 128, 128, 0.1);\r\n    width: 100%;\r\n}\r\n\r\n.headr{\r\n  display: flex;\r\n  flex-direction: row;\r\n  padding-left: 30px;\r\n  padding-right: 30px;\r\n  padding-top: 10px;\r\n  padding-bottom: 10px;\r\n  justify-content: space-between;\r\n}\r\n\r\nsvg{\r\n  margin-bottom: 0px;\r\n}",
                    "styleUrl": "./view-card-modal-window.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "listsCardsService",
                        "type": "ListsCardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actionsService",
                        "type": "ActionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ViewCardModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "listsCardsService",
                        "type": "ListsCardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actionsService",
                        "type": "ActionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ViewCardModalWindowComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<literal type>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n<div class=\"bg-dark headr\" style=\"height: 10%;\">\r\n    <h3 style=\"color: aliceblue;\" class=\"fs-5 fw-semibold\">Card</h3>\r\n    <button style=\"width: fit-content; outline: none; border: none; background: none;\" (click)=\"closeModal()\">\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"white\" class=\"bi bi-x-lg\" viewBox=\"0 0 16 16\">\r\n        <path d=\"M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z\"/>\r\n    </svg></button>\r\n</div>\r\n<div *ngIf=\"card as cardModel\" id=\"modal-content-wrapper\">\r\n    <div class=\"p-4 card-info\">\r\n    <div class=\"m-header\">\r\n    <p class=\"modal-title\">{{cardModel.name}}</p>\r\n    <div (click)=\"openEditForm()\" class=\"but-edit\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"gray\" class=\"bi bi-pencil-square\" viewBox=\"0 0 16 16\">\r\n            <path d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\"/>\r\n            <path fill-rule=\"evenodd\" d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z\"/>\r\n          </svg>\r\n          <p class=\"gr-txt\">Edit</p>\r\n    </div>\r\n</div>\r\n    <div class=\"wrapper\">\r\n        <div class=\"box a\">\r\n           <div class=\"row-prop\">\r\n            <svg  xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"gray\" class=\"bi bi-list-task\" viewBox=\"0 0 16 16\">\r\n                <path fill-rule=\"evenodd\" d=\"M2 2.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5V3a.5.5 0 0 0-.5-.5zM3 3H2v1h1z\"/>\r\n                <path d=\"M5 3.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5M5.5 7a.5.5 0 0 0 0 1h9a.5.5 0 0 0 0-1zm0 4a.5.5 0 0 0 0 1h9a.5.5 0 0 0 0-1z\"/>\r\n                <path fill-rule=\"evenodd\" d=\"M1.5 7a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5zM2 7h1v1H2zm0 3.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5zm1 .5H2v1h1z\"/>\r\n            </svg>\r\n              <p class=\"gr-txt\">List</p>\r\n           </div> \r\n        </div>\r\n        <div class=\"box b\">\r\n                <select disabled=\"true\" name=\"listCardsName\" class=\"form-control\" [(ngModel)]=\"cardModel.listCardsName\">\r\n                    <option selected [ngValue]=\"card.listCardsName\">\r\n                        {{card.listCardsName}}\r\n                    </option>\r\n                </select>\r\n        </div>\r\n        <div class=\"box c\">\r\n            <div class=\"row-prop\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"gray\" class=\"bi bi-calendar3-event\" viewBox=\"0 0 16 16\">\r\n                    <path d=\"M14 0H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2M1 3.857C1 3.384 1.448 3 2 3h12c.552 0 1 .384 1 .857v10.286c0 .473-.448.857-1 .857H2c-.552 0-1-.384-1-.857z\"/>\r\n                    <path d=\"M12 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2\"/>\r\n                  </svg>\r\n                  <p class=\"gr-txt\">Due date</p>\r\n               </div> \r\n        </div>\r\n        <div class=\"box d\">\r\n            <h6 class=\"h6dd\">{{convertToLocalDate(cardModel.dueDate)}}</h6>\r\n        </div>\r\n        <div class=\"box e\">\r\n            <div class=\"row-prop\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"gray\" class=\"bi bi-bookmark-star\" viewBox=\"0 0 16 16\">\r\n                    <path d=\"M7.84 4.1a.178.178 0 0 1 .32 0l.634 1.285a.18.18 0 0 0 .134.098l1.42.206c.145.021.204.2.098.303L9.42 6.993a.18.18 0 0 0-.051.158l.242 1.414a.178.178 0 0 1-.258.187l-1.27-.668a.18.18 0 0 0-.165 0l-1.27.668a.178.178 0 0 1-.257-.187l.242-1.414a.18.18 0 0 0-.05-.158l-1.03-1.001a.178.178 0 0 1 .098-.303l1.42-.206a.18.18 0 0 0 .134-.098z\"/>\r\n                    <path d=\"M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1z\"/>\r\n                  </svg>\r\n                  <p class=\"gr-txt\">Priority</p>\r\n               </div> \r\n        </div>\r\n        <div class=\"box f\">\r\n            <h6 class=\"card-priority\">{{cardModel.priority}}</h6>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-descr\">\r\n        <h2 style=\"margin-bottom: 5px;\">Description</h2>\r\n        <p class=\"gr-decsr\">{{cardModel.description}}</p>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"(actionsObs$ | async) as actionsObs\" class=\"pt-4 px-3 scrollSidebar\" style=\"overflow-y: auto;\">\r\n        <div class=\"col\" *ngFor=\"let action of actionsObs\">\r\n            <div [innerHTML]=\"action.message\"></div>\r\n            <p class=\"date\">{{convertToLocalDate2(action.actionTime)}}</p>\r\n        </div>\r\n    </div>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-e3fcb9f21d93171c2710ee12e44c62e6cca14181bb943d40e610ee1e2cb6ec105002b66366b29fe1a0237b3b99cd4564667fb5afa76b5c34ae67535d20af9ddc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, isDevMode } from '@angular/core';\r\nimport { BrowserModule, provideClientHydration } from '@angular/platform-browser';\r\nimport { HttpClientModule, provideHttpClient, withFetch} from '@angular/common/http';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HomeComponent } from './_components/home/home.component';\r\nimport { CardComponent } from './_components/cards/card/card.component';\r\nimport { ListCardsComponent } from './_components/lists-cards/list-cards/list-cards.component';\r\nimport { NavComponent } from './_components/nav/nav.component';\r\nimport { ActionsSidebarComponent } from './_components/actions/actions-sidebar/actions-sidebar.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { EditCardModalWindowComponent } from './_components/cards/edit-card-modal-window/edit-card-modal-window.component';\r\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport {ButtonModule} from 'primeng/button';\r\nimport { ContextMenuModule } from 'primeng/contextmenu';\r\nimport { CreateCardModalWindowComponent } from './_components/cards/create-card-modal-window/create-card-modal-window.component';\r\nimport { DeleteCardModalWindowComponent } from './_components/cards/delete-card-modal-window/delete-card-modal-window.component';\r\nimport { ListContextMenuComponent } from './_components/lists-cards/list-context-menu/list-context-menu.component';\r\nimport { CardContextMenuComponent } from './_components/cards/card-context-menu/card-context-menu.component';\r\nimport { EditListModalWindowComponent } from './_components/lists-cards/edit-list-modal-window/edit-list-modal-window.component';\r\nimport { DeleteListModalWindowComponent } from './_components/lists-cards/delete-list-modal-window/delete-list-modal-window.component';\r\nimport { CreateListCardsModalWindowComponent } from './_components/lists-cards/create-list-modal-window/create-list-modal-window.component';\r\nimport { ViewCardModalWindowComponent } from './_components/cards/view-card-modal-window/view-card-modal-window.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { BoardListComponent } from './_components/boards/board-list/board-list.component';\r\nimport { BoardComponent } from './_components/boards/board/board.component';\r\nimport { BoardContextMenuComponent } from './_components/boards/board-context-menu/board-context-menu.component';\r\nimport { CreateBoardModalWindowComponent } from './_components/boards/create-board-modal-window/create-board-modal-window.component';\r\nimport { DeleteBoardModalWindowComponent } from './_components/boards/delete-board-modal-window/delete-board-modal-window.component';\r\nimport { EditBoardModalWindowComponent } from './_components/boards/edit-board-modal-window/edit-board-modal-window.component';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { ListsEffects } from './store/lists/lists.effects';\r\nimport { boardReducer } from './store/boards/board.reducer';\r\nimport { listsReducer } from './store/lists/lists.reducer';\r\nimport { cardReducer } from './store/cards/card.reducer';\r\nimport { CardEffects } from './store/cards/card.effects';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    CardComponent,\r\n    ListCardsComponent,\r\n    NavComponent,\r\n    ActionsSidebarComponent,\r\n    EditCardModalWindowComponent,\r\n    EditListModalWindowComponent,\r\n    CardContextMenuComponent,\r\n    CreateCardModalWindowComponent,\r\n    CreateListCardsModalWindowComponent,\r\n    DeleteCardModalWindowComponent,\r\n    DeleteListModalWindowComponent,\r\n    ListContextMenuComponent,\r\n    ViewCardModalWindowComponent,\r\n    BoardListComponent,\r\n    BoardComponent,\r\n    BoardContextMenuComponent,\r\n    CreateBoardModalWindowComponent,\r\n    DeleteBoardModalWindowComponent,\r\n    EditBoardModalWindowComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    TooltipModule.forRoot(),\r\n    MatButtonModule,\r\n    MatDialogModule,\r\n    ContextMenuModule,\r\n    ButtonModule,\r\n    StoreModule.forRoot({id: boardReducer, lists: listsReducer, card: cardReducer}),\r\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: !isDevMode() }),\r\n    EffectsModule.forRoot([ListsEffects, CardEffects])\r\n  ],\r\n  providers: [    ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActionsSidebarComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BoardComponent"
                        },
                        {
                            "name": "BoardContextMenuComponent"
                        },
                        {
                            "name": "BoardListComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "CardContextMenuComponent"
                        },
                        {
                            "name": "CreateBoardModalWindowComponent"
                        },
                        {
                            "name": "CreateCardModalWindowComponent"
                        },
                        {
                            "name": "CreateListCardsModalWindowComponent"
                        },
                        {
                            "name": "DeleteBoardModalWindowComponent"
                        },
                        {
                            "name": "DeleteCardModalWindowComponent"
                        },
                        {
                            "name": "DeleteListModalWindowComponent"
                        },
                        {
                            "name": "EditBoardModalWindowComponent"
                        },
                        {
                            "name": "EditCardModalWindowComponent"
                        },
                        {
                            "name": "EditListModalWindowComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "ListCardsComponent"
                        },
                        {
                            "name": "ListContextMenuComponent"
                        },
                        {
                            "name": "NavComponent"
                        },
                        {
                            "name": "ViewCardModalWindowComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-5747bcd477cef8768d09f4903e21f140cd1a80cf3d6bf5240ee0e3fe2be4ad788382916759cdbd2e6d1a691993d72bc949a9a3f451e8b13bd3673c2a6c7054cd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { HomeComponent } from './_components/home/home.component';\r\nimport { ActionsSidebarComponent } from './_components/actions/actions-sidebar/actions-sidebar.component';\r\nimport { BoardListComponent } from './_components/boards/board-list/board-list.component';\r\nimport { BoardComponent } from './_components/boards/board/board.component';\r\n\r\nconst routes: Routes = [\r\n  {path: '', component: HomeComponent},\r\n  {path: 'boards', component: BoardListComponent},\r\n  {path: 'boards/:id', component: BoardComponent},\r\n  {path: '**', component: HomeComponent, pathMatch: 'full'},\r\n  {path: 'actions', component: ActionsSidebarComponent}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "_boardReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/boards/board.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(initialState, \r\n    on(openBoard,(state, action)=>{\r\n        return{\r\n            ...state,\r\n            id: action.id\r\n        };\r\n    }),\r\n    on(closeBoard,\r\n        (state)=>{\r\n            return{\r\n                ...state,\r\n                id: 0\r\n            };\r\n        })\r\n    )"
            },
            {
                "name": "_cardReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/cards/card.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(cardState, \r\n    on(loadCard, (state, action)=>{\r\n        return{\r\n            ...state,\r\n            cardId: action.cardId\r\n        }\r\n    }),\r\n    on(loadCardSuccess,(state, action) =>{\r\n        return{\r\n            ...state,\r\n            card:action.card\r\n        };\r\n    })\r\n    )"
            },
            {
                "name": "_listsReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/lists.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(listsState, \r\n    on(loadLists,(state, action)=>{\r\n        return{\r\n            ...state,\r\n            boardId: action.boardId\r\n        };\r\n    }),\r\n    on(loadListsSuccess,(state, action)=>{\r\n        return{\r\n            ...state,\r\n            lists:action.lists\r\n        };\r\n    }),\r\n    //     on(addList,(state, action)=>{\r\n    //     const _list = {...action.listInput}\r\n    //     return{\r\n    //         ...state,\r\n    //         boardId: action.listInput\r\n    //     };\r\n    // }),\r\n    on(addListSuccess,(state, action)=>{\r\n        const _list = {...action.list}\r\n        return{\r\n            ...state,\r\n            lists:[...state, _list]\r\n        };\r\n    })\r\n    )"
            },
            {
                "name": "ADD_LIST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/lists.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[list component] add list'"
            },
            {
                "name": "ADD_LIST_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/lists.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[list component] add list success'"
            },
            {
                "name": "addList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/lists.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(ADD_LIST, props<{listInput: CreateListCardsModel}>())"
            },
            {
                "name": "addListSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/lists.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(ADD_LIST_SUCCESS, props<{list: CreateListCardsModel}>())"
            },
            {
                "name": "AppState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/global/App.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    boardId: boardReducer, \r\n    lists: listsReducer\r\n}"
            },
            {
                "name": "cardState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/cards/card.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CardModel",
                "defaultValue": "{id: 0, name:'', actions:[], boardId:0, description:'', dueDate:'', listCardsName:'', priority:''}"
            },
            {
                "name": "closeBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/boards/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\"closeBoard\")"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    production: false,\r\n    apiUrl: 'https://localhost:7266/api/'\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    production: false,\r\n    apiUrl: 'api/'\r\n}"
            },
            {
                "name": "getlists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/lists.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(getlistsstate,(state)=>{\r\n    return state\r\n})"
            },
            {
                "name": "getlistsstate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/lists.selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ListCardsModel[]>('listsoo')"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/boards/board.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    id:0\r\n}"
            },
            {
                "name": "listsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/lists.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ListCardsModel[]",
                "defaultValue": "[]"
            },
            {
                "name": "LOAD_CARD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/cards/card.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[view card component] load card'"
            },
            {
                "name": "LOAD_CARD_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/cards/card.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[view card component] load card success'"
            },
            {
                "name": "LOAD_LISTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/lists.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[card component] load lists'"
            },
            {
                "name": "LOAD_LISTS_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/lists.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'[card component] load lists success'"
            },
            {
                "name": "loadCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/cards/card.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(LOAD_CARD, props<{cardId: number}>())"
            },
            {
                "name": "loadCardSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/cards/card.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(LOAD_CARD_SUCCESS, props<{card: CardModel}>())"
            },
            {
                "name": "loadLists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/lists.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(LOAD_LISTS, props<{boardId: number}>())"
            },
            {
                "name": "loadListsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/lists/lists.action.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(LOAD_LISTS_SUCCESS, props<{lists: ListCardsModel[]}>())"
            },
            {
                "name": "openBoard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/boards/board.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\"openBoard\", props<{id: number}>())"
            },
            {
                "name": "PriorityLabelMapping",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_models/priority/priority.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<Priority, string>",
                "defaultValue": "{\r\n    [Priority.High]: \"High\",\r\n    [Priority.Medium]: \"Medium\",\r\n    [Priority.Low]: \"Low\",\r\n}"
            }
        ],
        "functions": [
            {
                "name": "boardReducer",
                "file": "src/app/store/boards/board.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "cardReducer",
                "file": "src/app/store/cards/card.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "listsReducer",
                "file": "src/app/store/lists/lists.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "Priority",
                "childs": [
                    {
                        "name": "High",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "High"
                    },
                    {
                        "name": "Medium",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Medium"
                    },
                    {
                        "name": "Low",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Low"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/_models/priority/priority.ts"
            }
        ],
        "groupedVariables": {
            "src/app/store/boards/board.reducer.ts": [
                {
                    "name": "_boardReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/boards/board.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(initialState, \r\n    on(openBoard,(state, action)=>{\r\n        return{\r\n            ...state,\r\n            id: action.id\r\n        };\r\n    }),\r\n    on(closeBoard,\r\n        (state)=>{\r\n            return{\r\n                ...state,\r\n                id: 0\r\n            };\r\n        })\r\n    )"
                }
            ],
            "src/app/store/cards/card.reducer.ts": [
                {
                    "name": "_cardReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/cards/card.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(cardState, \r\n    on(loadCard, (state, action)=>{\r\n        return{\r\n            ...state,\r\n            cardId: action.cardId\r\n        }\r\n    }),\r\n    on(loadCardSuccess,(state, action) =>{\r\n        return{\r\n            ...state,\r\n            card:action.card\r\n        };\r\n    })\r\n    )"
                }
            ],
            "src/app/store/lists/lists.reducer.ts": [
                {
                    "name": "_listsReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/lists.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(listsState, \r\n    on(loadLists,(state, action)=>{\r\n        return{\r\n            ...state,\r\n            boardId: action.boardId\r\n        };\r\n    }),\r\n    on(loadListsSuccess,(state, action)=>{\r\n        return{\r\n            ...state,\r\n            lists:action.lists\r\n        };\r\n    }),\r\n    //     on(addList,(state, action)=>{\r\n    //     const _list = {...action.listInput}\r\n    //     return{\r\n    //         ...state,\r\n    //         boardId: action.listInput\r\n    //     };\r\n    // }),\r\n    on(addListSuccess,(state, action)=>{\r\n        const _list = {...action.list}\r\n        return{\r\n            ...state,\r\n            lists:[...state, _list]\r\n        };\r\n    })\r\n    )"
                }
            ],
            "src/app/store/lists/lists.action.ts": [
                {
                    "name": "ADD_LIST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/lists.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[list component] add list'"
                },
                {
                    "name": "ADD_LIST_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/lists.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[list component] add list success'"
                },
                {
                    "name": "addList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/lists.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(ADD_LIST, props<{listInput: CreateListCardsModel}>())"
                },
                {
                    "name": "addListSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/lists.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(ADD_LIST_SUCCESS, props<{list: CreateListCardsModel}>())"
                },
                {
                    "name": "LOAD_LISTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/lists.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[card component] load lists'"
                },
                {
                    "name": "LOAD_LISTS_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/lists.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[card component] load lists success'"
                },
                {
                    "name": "loadLists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/lists.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(LOAD_LISTS, props<{boardId: number}>())"
                },
                {
                    "name": "loadListsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/lists.action.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(LOAD_LISTS_SUCCESS, props<{lists: ListCardsModel[]}>())"
                }
            ],
            "src/app/store/global/App.state.ts": [
                {
                    "name": "AppState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/global/App.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    boardId: boardReducer, \r\n    lists: listsReducer\r\n}"
                }
            ],
            "src/app/store/cards/card.state.ts": [
                {
                    "name": "cardState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/cards/card.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardModel",
                    "defaultValue": "{id: 0, name:'', actions:[], boardId:0, description:'', dueDate:'', listCardsName:'', priority:''}"
                }
            ],
            "src/app/store/boards/board.actions.ts": [
                {
                    "name": "closeBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/boards/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\"closeBoard\")"
                },
                {
                    "name": "openBoard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/boards/board.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\"openBoard\", props<{id: number}>())"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    production: false,\r\n    apiUrl: 'https://localhost:7266/api/'\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    production: false,\r\n    apiUrl: 'api/'\r\n}"
                }
            ],
            "src/app/store/lists/lists.selector.ts": [
                {
                    "name": "getlists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/lists.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(getlistsstate,(state)=>{\r\n    return state\r\n})"
                },
                {
                    "name": "getlistsstate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/lists.selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ListCardsModel[]>('listsoo')"
                }
            ],
            "src/app/store/boards/board.state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/boards/board.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    id:0\r\n}"
                }
            ],
            "src/app/store/lists/lists.state.ts": [
                {
                    "name": "listsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/lists/lists.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListCardsModel[]",
                    "defaultValue": "[]"
                }
            ],
            "src/app/store/cards/card.actions.ts": [
                {
                    "name": "LOAD_CARD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/cards/card.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[view card component] load card'"
                },
                {
                    "name": "LOAD_CARD_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/cards/card.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'[view card component] load card success'"
                },
                {
                    "name": "loadCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/cards/card.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(LOAD_CARD, props<{cardId: number}>())"
                },
                {
                    "name": "loadCardSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/cards/card.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(LOAD_CARD_SUCCESS, props<{card: CardModel}>())"
                }
            ],
            "src/app/_models/priority/priority.ts": [
                {
                    "name": "PriorityLabelMapping",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_models/priority/priority.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<Priority, string>",
                    "defaultValue": "{\r\n    [Priority.High]: \"High\",\r\n    [Priority.Medium]: \"Medium\",\r\n    [Priority.Low]: \"Low\",\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/boards/board.reducer.ts": [
                {
                    "name": "boardReducer",
                    "file": "src/app/store/boards/board.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/cards/card.reducer.ts": [
                {
                    "name": "cardReducer",
                    "file": "src/app/store/cards/card.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/lists/lists.reducer.ts": [
                {
                    "name": "listsReducer",
                    "file": "src/app/store/lists/lists.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/_models/priority/priority.ts": [
                {
                    "name": "Priority",
                    "childs": [
                        {
                            "name": "High",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "High"
                        },
                        {
                            "name": "Medium",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Medium"
                        },
                        {
                            "name": "Low",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Low"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/_models/priority/priority.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "boards",
                        "component": "BoardListComponent"
                    },
                    {
                        "path": "boards/:id",
                        "component": "BoardComponent"
                    },
                    {
                        "path": "**",
                        "component": "HomeComponent",
                        "pathMatch": "full"
                    },
                    {
                        "path": "actions",
                        "component": "ActionsSidebarComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/_components/actions/actions-sidebar/actions-sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionsSidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/boards/board-context-menu/board-context-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardContextMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/boards/board-list/board-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/boards/board/board.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/boards/create-board-modal-window/create-board-modal-window.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateBoardModalWindowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/boards/delete-board-modal-window/delete-board-modal-window.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteBoardModalWindowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/boards/edit-board-modal-window/edit-board-modal-window.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditBoardModalWindowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/cards/card-context-menu/card-context-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardContextMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/cards/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/cards/create-card-modal-window/create-card-modal-window.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateCardModalWindowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/cards/delete-card-modal-window/delete-card-modal-window.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteCardModalWindowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/cards/edit-card-modal-window/edit-card-modal-window.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditCardModalWindowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/cards/view-card-modal-window/view-card-modal-window.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ViewCardModalWindowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/lists-cards/create-list-modal-window/create-list-modal-window.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateListCardsModalWindowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/lists-cards/delete-list-modal-window/delete-list-modal-window.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteListModalWindowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/lists-cards/edit-list-modal-window/edit-list-modal-window.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditListModalWindowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/lists-cards/list-cards/list-cards.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListCardsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/lists-cards/list-context-menu/list-context-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListContextMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/_components/nav/nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/action/actionModel.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActionModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/action/actionsSieveResponse.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActionsSieveResponse",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/board/boardModel.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BoardModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/board/createBoardModel.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateBoardModel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/board/updateBoardModel.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateBoardModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/card/CardsSieveResponse.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CardsSieveResponse",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/card/cardModel.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CardModel",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/card/createCardModel.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateCardModel",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/card/updateCardModel.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateCardModel",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/listCards/ListsCardsSieveResponse.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListsCardsSieveResponse",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/listCards/createListCardsModel.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateListCardsModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/listCards/listCardsModel.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListCardsModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/listCards/updateListCardsModel.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateListCardsModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/_models/priority/priority.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PriorityLabelMapping",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/actions.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ActionsService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/boards.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BoardsService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/cards.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CardsService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/_services/lists-cards.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ListsCardsService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "closeBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/board.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "openBoard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/board.effects.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BoardEffects",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/board.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "boardReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/board.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_boardReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/boards/board.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/cards/card.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOAD_CARD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/cards/card.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOAD_CARD_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/cards/card.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/cards/card.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCardSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/cards/card.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CardEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/cards/card.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "cardReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/cards/card.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_cardReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/cards/card.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cardState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/global/App.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/global/AppState.Model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/lists.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_LIST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/lists.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_LIST_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/lists.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/lists.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addListSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/lists.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOAD_LISTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/lists.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOAD_LISTS_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/lists.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadLists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/lists.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadListsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/lists.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ListsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/lists.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "listsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/lists.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_listsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/lists.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getlists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/lists.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getlistsstate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/lists/lists.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "listsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}