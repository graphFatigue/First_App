// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskBoard.Infrastructure;

#nullable disable

namespace TaskBoard.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskBoard.Domain.Entities.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("action_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("action_time");

                    b.Property<int?>("CardId")
                        .HasColumnType("integer")
                        .HasColumnName("card_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("message");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("actions", (string)null);
                });

            modelBuilder.Entity("TaskBoard.Domain.Entities.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("list_cards_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("boards", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Family doard"
                        },
                        new
                        {
                            Id = 2,
                            Name = "My board"
                        });
                });

            modelBuilder.Entity("TaskBoard.Domain.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("card_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardId")
                        .HasColumnType("integer")
                        .HasColumnName("board_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("due_date");

                    b.Property<int>("ListCardsId")
                        .HasColumnType("integer")
                        .HasColumnName("list_cards_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("priority");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("ListCardsId");

                    b.ToTable("cards", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BoardId = 1,
                            Description = "You need to wash the dishes",
                            DueDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            ListCardsId = 1,
                            Name = "Wash the dishes",
                            Priority = "Medium"
                        },
                        new
                        {
                            Id = 2,
                            BoardId = 1,
                            Description = "You need to do the launry!!",
                            DueDate = new DateTime(2024, 5, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            ListCardsId = 1,
                            Name = "Do laundry",
                            Priority = "High"
                        },
                        new
                        {
                            Id = 3,
                            BoardId = 1,
                            Description = "You need to plan your summer vacation",
                            DueDate = new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            ListCardsId = 1,
                            Name = "Plan your vacation",
                            Priority = "Low"
                        },
                        new
                        {
                            Id = 4,
                            BoardId = 1,
                            Description = "You really need to give away your old cloth",
                            DueDate = new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            ListCardsId = 1,
                            Name = "Give away the old cloth",
                            Priority = "Low"
                        },
                        new
                        {
                            Id = 5,
                            BoardId = 2,
                            Description = "You're going to celebrate your promotion",
                            DueDate = new DateTime(2024, 7, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            ListCardsId = 2,
                            Name = "Find something to wear this evening",
                            Priority = "High"
                        },
                        new
                        {
                            Id = 6,
                            BoardId = 2,
                            Description = "You've seen a great pair of shoes tomorrow at the shop",
                            DueDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            ListCardsId = 2,
                            Name = "Buy new shoes",
                            Priority = "Medium"
                        },
                        new
                        {
                            Id = 7,
                            BoardId = 1,
                            Description = "You have nothing to eat",
                            DueDate = new DateTime(2024, 5, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            ListCardsId = 1,
                            Name = "Buy groceries",
                            Priority = "High"
                        },
                        new
                        {
                            Id = 8,
                            BoardId = 2,
                            Description = "You need to return call!!",
                            DueDate = new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            ListCardsId = 2,
                            Name = "Call your mother",
                            Priority = "Low"
                        },
                        new
                        {
                            Id = 9,
                            BoardId = 2,
                            Description = "You've been feeling really under the weather lately",
                            DueDate = new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            ListCardsId = 2,
                            Name = "Schedule an appointment with the doctor",
                            Priority = "Low"
                        },
                        new
                        {
                            Id = 10,
                            BoardId = 2,
                            Description = "Long time no see!",
                            DueDate = new DateTime(2024, 6, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            ListCardsId = 2,
                            Name = "Go for a walk with your friend",
                            Priority = "High"
                        });
                });

            modelBuilder.Entity("TaskBoard.Domain.Entities.ListCards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("list_cards_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardId")
                        .HasColumnType("integer")
                        .HasColumnName("board_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("list_cards", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BoardId = 1,
                            Name = "Planned"
                        },
                        new
                        {
                            Id = 2,
                            BoardId = 2,
                            Name = "To Do"
                        });
                });

            modelBuilder.Entity("TaskBoard.Domain.Entities.Action", b =>
                {
                    b.HasOne("TaskBoard.Domain.Entities.Card", "Card")
                        .WithMany("Actions")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Card");
                });

            modelBuilder.Entity("TaskBoard.Domain.Entities.Card", b =>
                {
                    b.HasOne("TaskBoard.Domain.Entities.Board", "Board")
                        .WithMany("Cards")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskBoard.Domain.Entities.ListCards", "ListCards")
                        .WithMany("Cards")
                        .HasForeignKey("ListCardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("ListCards");
                });

            modelBuilder.Entity("TaskBoard.Domain.Entities.ListCards", b =>
                {
                    b.HasOne("TaskBoard.Domain.Entities.Board", "Board")
                        .WithMany("ListsCards")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("TaskBoard.Domain.Entities.Board", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("ListsCards");
                });

            modelBuilder.Entity("TaskBoard.Domain.Entities.Card", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("TaskBoard.Domain.Entities.ListCards", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
